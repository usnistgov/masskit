{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3b8a05ec",
   "metadata": {},
   "source": [
    "# Imports and Parameter Settings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4e8f1dc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import pyarrow as pa\n",
    "import pyarrow.parquet as pq\n",
    "import pyarrow.compute as pc\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from rdkit import DataStructs\n",
    "#sys.path.append('/home/djs10/gitlab/msdc_services/libraries')\n",
    "from masskit.spectrum import spectrum\n",
    "\n",
    "# Parameters\n",
    "MIN_INTENSITY_PERCENT=0.05\n",
    "USE_MZ_ZERO=True\n",
    "FILENAME = '/data/aiomics/search/libraries/hr_msms_nist2020_v42_0.parquet'\n",
    "OUTFILENAME = '/data/aiomics/search/libraries/hr_msms_nist2020_v42_0_fingerprints.parquet'\n",
    "#FILENAME = '/data/aiomics/search/libraries/small.parquet'\n",
    "#OUTFILENAME = '/data/aiomics/search/libraries/small_fingerprints.parquet'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7de3a1a",
   "metadata": {},
   "source": [
    "# Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ac325454",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.85 s, sys: 941 ms, total: 2.79 s\n",
      "Wall time: 4.4 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>mz</th>\n",
       "      <th>intensity</th>\n",
       "      <th>set</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035166</td>\n",
       "      <td>[45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...</td>\n",
       "      <td>[46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...</td>\n",
       "      <td>dev</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035167</td>\n",
       "      <td>[597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...</td>\n",
       "      <td>[50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035168</td>\n",
       "      <td>[537.39, 599.5, 600.51, 1449.98, 1467.0]</td>\n",
       "      <td>[55.94, 999.0, 42.26, 853.85, 139.16]</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035169</td>\n",
       "      <td>[597.46, 598.5, 599.51, 600.49, 1448.92, 1449....</td>\n",
       "      <td>[41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035170</td>\n",
       "      <td>[598.49, 599.5, 600.5, 1449.97]</td>\n",
       "      <td>[47.85, 999.0, 85.51, 336.46]</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751903</th>\n",
       "      <td>3485111</td>\n",
       "      <td>[150.0546, 151.0386, 152.0703, 154.0496, 156.0...</td>\n",
       "      <td>[34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751904</th>\n",
       "      <td>3485112</td>\n",
       "      <td>[150.0545, 151.0385, 154.0496, 166.0495, 167.0...</td>\n",
       "      <td>[60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751905</th>\n",
       "      <td>3485113</td>\n",
       "      <td>[150.0547, 151.0386, 168.0653, 178.0494, 197.0...</td>\n",
       "      <td>[148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751906</th>\n",
       "      <td>3485114</td>\n",
       "      <td>[150.0547, 151.0387, 264.2682, 265.2721]</td>\n",
       "      <td>[316.88, 334.07, 999.0, 92.71]</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751907</th>\n",
       "      <td>3485115</td>\n",
       "      <td>[186.0757, 197.0439, 204.0863, 205.09, 214.071...</td>\n",
       "      <td>[18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>751908 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                                 mz  \\\n",
       "0       1035166  [45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...   \n",
       "1       1035167  [597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...   \n",
       "2       1035168           [537.39, 599.5, 600.51, 1449.98, 1467.0]   \n",
       "3       1035169  [597.46, 598.5, 599.51, 600.49, 1448.92, 1449....   \n",
       "4       1035170                    [598.49, 599.5, 600.5, 1449.97]   \n",
       "...         ...                                                ...   \n",
       "751903  3485111  [150.0546, 151.0386, 152.0703, 154.0496, 156.0...   \n",
       "751904  3485112  [150.0545, 151.0385, 154.0496, 166.0495, 167.0...   \n",
       "751905  3485113  [150.0547, 151.0386, 168.0653, 178.0494, 197.0...   \n",
       "751906  3485114           [150.0547, 151.0387, 264.2682, 265.2721]   \n",
       "751907  3485115  [186.0757, 197.0439, 204.0863, 205.09, 214.071...   \n",
       "\n",
       "                                                intensity    set  \n",
       "0       [46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...    dev  \n",
       "1       [50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...  train  \n",
       "2                   [55.94, 999.0, 42.26, 853.85, 139.16]  train  \n",
       "3       [41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...  train  \n",
       "4                           [47.85, 999.0, 85.51, 336.46]  train  \n",
       "...                                                   ...    ...  \n",
       "751903  [34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....  train  \n",
       "751904  [60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....  train  \n",
       "751905  [148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...  train  \n",
       "751906                     [316.88, 334.07, 999.0, 92.71]  train  \n",
       "751907  [18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...  train  \n",
       "\n",
       "[751908 rows x 4 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "# ion_mode = p\n",
    "# set\n",
    "only_cols = [\"id\", \"mz\", \"intensity\", \"set\"]\n",
    "filter_list = [ ('ion_mode','=','P') ]\n",
    "\n",
    "table = pq.read_table(FILENAME, columns=only_cols, filters=filter_list).combine_chunks()\n",
    "\n",
    "pd.set_option(\"display.max_columns\", 70)\n",
    "table.to_pandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c6044caa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['id',\n",
       " 'charge',\n",
       " 'ev',\n",
       " 'instrument',\n",
       " 'instrument_type',\n",
       " 'ion_mode',\n",
       " 'ionization',\n",
       " 'name',\n",
       " 'nce',\n",
       " 'intensity',\n",
       " 'product_massinfo',\n",
       " 'mz',\n",
       " 'precursor_intensity',\n",
       " 'precursor_massinfo',\n",
       " 'precursor_mz',\n",
       " 'spectrum_fp',\n",
       " 'spectrum_fp_count',\n",
       " 'aromatic_rings',\n",
       " 'collision_energy',\n",
       " 'collision_gas',\n",
       " 'column',\n",
       " 'ecfp4',\n",
       " 'ecfp4_count',\n",
       " 'estimated_ri',\n",
       " 'estimated_ri_error',\n",
       " 'exact_mass',\n",
       " 'exact_mw',\n",
       " 'experimental_ri',\n",
       " 'experimental_ri_data',\n",
       " 'experimental_ri_error',\n",
       " 'formula',\n",
       " 'has_2d',\n",
       " 'has_conformer',\n",
       " 'has_tms',\n",
       " 'hba',\n",
       " 'hbd',\n",
       " 'inchi_key',\n",
       " 'inchi_key_orig',\n",
       " 'insource_voltage',\n",
       " 'isomeric_smiles',\n",
       " 'mol',\n",
       " 'num_atoms',\n",
       " 'num_undef_double',\n",
       " 'num_undef_stereo',\n",
       " 'rotatable_bonds',\n",
       " 'sample_inlet',\n",
       " 'set',\n",
       " 'smiles',\n",
       " 'stdnp',\n",
       " 'stdnp_data',\n",
       " 'stdnp_error',\n",
       " 'stdpolar',\n",
       " 'stdpolar_data',\n",
       " 'stdpolar_error',\n",
       " 'synonyms',\n",
       " 'tpsa',\n",
       " 'vial_id']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table.column_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "711f48cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.51 s, sys: 744 ms, total: 2.26 s\n",
      "Wall time: 1.81 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>charge</th>\n",
       "      <th>mz</th>\n",
       "      <th>intensity</th>\n",
       "      <th>exact_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035166</td>\n",
       "      <td>1</td>\n",
       "      <td>[45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...</td>\n",
       "      <td>[46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...</td>\n",
       "      <td>1448.97223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035167</td>\n",
       "      <td>1</td>\n",
       "      <td>[597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...</td>\n",
       "      <td>[50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...</td>\n",
       "      <td>1448.97223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035168</td>\n",
       "      <td>1</td>\n",
       "      <td>[537.39, 599.5, 600.51, 1449.98, 1467.0]</td>\n",
       "      <td>[55.94, 999.0, 42.26, 853.85, 139.16]</td>\n",
       "      <td>1448.97223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035169</td>\n",
       "      <td>1</td>\n",
       "      <td>[597.46, 598.5, 599.51, 600.49, 1448.92, 1449....</td>\n",
       "      <td>[41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...</td>\n",
       "      <td>1448.97223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035170</td>\n",
       "      <td>1</td>\n",
       "      <td>[598.49, 599.5, 600.5, 1449.97]</td>\n",
       "      <td>[47.85, 999.0, 85.51, 336.46]</td>\n",
       "      <td>1448.97223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007661</th>\n",
       "      <td>3485111</td>\n",
       "      <td>2</td>\n",
       "      <td>[150.0546, 151.0386, 152.0703, 154.0496, 156.0...</td>\n",
       "      <td>[34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....</td>\n",
       "      <td>1383.82383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007662</th>\n",
       "      <td>3485112</td>\n",
       "      <td>2</td>\n",
       "      <td>[150.0545, 151.0385, 154.0496, 166.0495, 167.0...</td>\n",
       "      <td>[60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....</td>\n",
       "      <td>1383.82383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007663</th>\n",
       "      <td>3485113</td>\n",
       "      <td>2</td>\n",
       "      <td>[150.0547, 151.0386, 168.0653, 178.0494, 197.0...</td>\n",
       "      <td>[148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...</td>\n",
       "      <td>1383.82383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007664</th>\n",
       "      <td>3485114</td>\n",
       "      <td>2</td>\n",
       "      <td>[150.0547, 151.0387, 264.2682, 265.2721]</td>\n",
       "      <td>[316.88, 334.07, 999.0, 92.71]</td>\n",
       "      <td>1383.82383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007665</th>\n",
       "      <td>3485115</td>\n",
       "      <td>2</td>\n",
       "      <td>[186.0757, 197.0439, 204.0863, 205.09, 214.071...</td>\n",
       "      <td>[18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...</td>\n",
       "      <td>1383.82383</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1007666 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id  charge                                                 mz  \\\n",
       "0        1035166       1  [45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...   \n",
       "1        1035167       1  [597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...   \n",
       "2        1035168       1           [537.39, 599.5, 600.51, 1449.98, 1467.0]   \n",
       "3        1035169       1  [597.46, 598.5, 599.51, 600.49, 1448.92, 1449....   \n",
       "4        1035170       1                    [598.49, 599.5, 600.5, 1449.97]   \n",
       "...          ...     ...                                                ...   \n",
       "1007661  3485111       2  [150.0546, 151.0386, 152.0703, 154.0496, 156.0...   \n",
       "1007662  3485112       2  [150.0545, 151.0385, 154.0496, 166.0495, 167.0...   \n",
       "1007663  3485113       2  [150.0547, 151.0386, 168.0653, 178.0494, 197.0...   \n",
       "1007664  3485114       2           [150.0547, 151.0387, 264.2682, 265.2721]   \n",
       "1007665  3485115       2  [186.0757, 197.0439, 204.0863, 205.09, 214.071...   \n",
       "\n",
       "                                                 intensity  exact_mass  \n",
       "0        [46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...  1448.97223  \n",
       "1        [50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...  1448.97223  \n",
       "2                    [55.94, 999.0, 42.26, 853.85, 139.16]  1448.97223  \n",
       "3        [41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...  1448.97223  \n",
       "4                            [47.85, 999.0, 85.51, 336.46]  1448.97223  \n",
       "...                                                    ...         ...  \n",
       "1007661  [34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....  1383.82383  \n",
       "1007662  [60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....  1383.82383  \n",
       "1007663  [148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...  1383.82383  \n",
       "1007664                     [316.88, 334.07, 999.0, 92.71]  1383.82383  \n",
       "1007665  [18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...  1383.82383  \n",
       "\n",
       "[1007666 rows x 5 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "only_cols = [\"id\", \"charge\", \"mz\", \"intensity\", \"exact_mass\"]\n",
    "table = pq.read_table(FILENAME, columns=only_cols)\n",
    "table.to_pandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5cc50659",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>charge</th>\n",
       "      <th>mz</th>\n",
       "      <th>intensity</th>\n",
       "      <th>exact_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035166</td>\n",
       "      <td>1</td>\n",
       "      <td>[45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...</td>\n",
       "      <td>[46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...</td>\n",
       "      <td>1448.972230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1064281</td>\n",
       "      <td>2</td>\n",
       "      <td>[30.03, 44.05, 44.98, 45.06, 45.98, 47.99, 57....</td>\n",
       "      <td>[12.89, 18.98, 370.03, 92.31, 11.09, 63.64, 36...</td>\n",
       "      <td>152.044190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1074623</td>\n",
       "      <td>1</td>\n",
       "      <td>[81.03, 112.05, 308.06]</td>\n",
       "      <td>[27.37, 999.0, 161.84]</td>\n",
       "      <td>307.056936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1097402</td>\n",
       "      <td>1</td>\n",
       "      <td>[57.04, 57.07, 58.96, 85.04, 99.99, 118.07, 12...</td>\n",
       "      <td>[20.38, 42.16, 82.22, 18.08, 52.45, 40.76, 30....</td>\n",
       "      <td>261.111341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1114460</td>\n",
       "      <td>1</td>\n",
       "      <td>[44.05, 59.048, 60.056, 70.065, 73.064, 86.071...</td>\n",
       "      <td>[49.15, 55.54, 12.59, 95.8, 25.17, 52.65, 977....</td>\n",
       "      <td>233.112404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1140635</td>\n",
       "      <td>1</td>\n",
       "      <td>[50.015, 51.0228, 53.0385, 55.0178, 55.0542, 6...</td>\n",
       "      <td>[28.17, 44.06, 11.69, 11.89, 9.59, 2.7, 17.08,...</td>\n",
       "      <td>386.209324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1156152</td>\n",
       "      <td>1</td>\n",
       "      <td>[55.018, 65.0387, 68.9971, 77.0384, 78.0464, 7...</td>\n",
       "      <td>[10.39, 35.86, 3.2, 70.13, 29.57, 8.29, 521.98...</td>\n",
       "      <td>358.120508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1172453</td>\n",
       "      <td>-2</td>\n",
       "      <td>[62.9642, 77.9752, 78.9591, 92.0254, 96.9696, ...</td>\n",
       "      <td>[1.0, 3.9, 999.0, 13.29, 71.33, 55.94, 1.8, 1....</td>\n",
       "      <td>893.219673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1188155</td>\n",
       "      <td>1</td>\n",
       "      <td>[65.0386, 91.0543]</td>\n",
       "      <td>[502.1, 999.0]</td>\n",
       "      <td>135.104799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1203633</td>\n",
       "      <td>-1</td>\n",
       "      <td>[55.453, 57.0347, 59.014, 65.0397, 67.0553, 68...</td>\n",
       "      <td>[1.5, 7.59, 29.47, 1.6, 1.7, 1.1, 4.9, 5.79, 1...</td>\n",
       "      <td>374.209324</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  charge                                                 mz  \\\n",
       "0  1035166       1  [45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...   \n",
       "1  1064281       2  [30.03, 44.05, 44.98, 45.06, 45.98, 47.99, 57....   \n",
       "2  1074623       1                            [81.03, 112.05, 308.06]   \n",
       "3  1097402       1  [57.04, 57.07, 58.96, 85.04, 99.99, 118.07, 12...   \n",
       "4  1114460       1  [44.05, 59.048, 60.056, 70.065, 73.064, 86.071...   \n",
       "5  1140635       1  [50.015, 51.0228, 53.0385, 55.0178, 55.0542, 6...   \n",
       "6  1156152       1  [55.018, 65.0387, 68.9971, 77.0384, 78.0464, 7...   \n",
       "7  1172453      -2  [62.9642, 77.9752, 78.9591, 92.0254, 96.9696, ...   \n",
       "8  1188155       1                                 [65.0386, 91.0543]   \n",
       "9  1203633      -1  [55.453, 57.0347, 59.014, 65.0397, 67.0553, 68...   \n",
       "\n",
       "                                           intensity   exact_mass  \n",
       "0  [46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...  1448.972230  \n",
       "1  [12.89, 18.98, 370.03, 92.31, 11.09, 63.64, 36...   152.044190  \n",
       "2                             [27.37, 999.0, 161.84]   307.056936  \n",
       "3  [20.38, 42.16, 82.22, 18.08, 52.45, 40.76, 30....   261.111341  \n",
       "4  [49.15, 55.54, 12.59, 95.8, 25.17, 52.65, 977....   233.112404  \n",
       "5  [28.17, 44.06, 11.69, 11.89, 9.59, 2.7, 17.08,...   386.209324  \n",
       "6  [10.39, 35.86, 3.2, 70.13, 29.57, 8.29, 521.98...   358.120508  \n",
       "7  [1.0, 3.9, 999.0, 13.29, 71.33, 55.94, 1.8, 1....   893.219673  \n",
       "8                                     [502.1, 999.0]   135.104799  \n",
       "9  [1.5, 7.59, 29.47, 1.6, 1.7, 1.1, 4.9, 5.79, 1...   374.209324  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = table[0:100000:10000].to_pandas()\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "18d27125",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>1035166</td>\n",
       "      <td>1064281</td>\n",
       "      <td>1074623</td>\n",
       "      <td>1097402</td>\n",
       "      <td>1114460</td>\n",
       "      <td>1140635</td>\n",
       "      <td>1156152</td>\n",
       "      <td>1172453</td>\n",
       "      <td>1188155</td>\n",
       "      <td>1203633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>charge</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mz</th>\n",
       "      <td>[45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...</td>\n",
       "      <td>[30.03, 44.05, 44.98, 45.06, 45.98, 47.99, 57....</td>\n",
       "      <td>[81.03, 112.05, 308.06]</td>\n",
       "      <td>[57.04, 57.07, 58.96, 85.04, 99.99, 118.07, 12...</td>\n",
       "      <td>[44.05, 59.048, 60.056, 70.065, 73.064, 86.071...</td>\n",
       "      <td>[50.015, 51.0228, 53.0385, 55.0178, 55.0542, 6...</td>\n",
       "      <td>[55.018, 65.0387, 68.9971, 77.0384, 78.0464, 7...</td>\n",
       "      <td>[62.9642, 77.9752, 78.9591, 92.0254, 96.9696, ...</td>\n",
       "      <td>[65.0386, 91.0543]</td>\n",
       "      <td>[55.453, 57.0347, 59.014, 65.0397, 67.0553, 68...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>intensity</th>\n",
       "      <td>[46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...</td>\n",
       "      <td>[12.89, 18.98, 370.03, 92.31, 11.09, 63.64, 36...</td>\n",
       "      <td>[27.37, 999.0, 161.84]</td>\n",
       "      <td>[20.38, 42.16, 82.22, 18.08, 52.45, 40.76, 30....</td>\n",
       "      <td>[49.15, 55.54, 12.59, 95.8, 25.17, 52.65, 977....</td>\n",
       "      <td>[28.17, 44.06, 11.69, 11.89, 9.59, 2.7, 17.08,...</td>\n",
       "      <td>[10.39, 35.86, 3.2, 70.13, 29.57, 8.29, 521.98...</td>\n",
       "      <td>[1.0, 3.9, 999.0, 13.29, 71.33, 55.94, 1.8, 1....</td>\n",
       "      <td>[502.1, 999.0]</td>\n",
       "      <td>[1.5, 7.59, 29.47, 1.6, 1.7, 1.1, 4.9, 5.79, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exact_mass</th>\n",
       "      <td>1448.97223</td>\n",
       "      <td>152.04419</td>\n",
       "      <td>307.056936</td>\n",
       "      <td>261.111341</td>\n",
       "      <td>233.112404</td>\n",
       "      <td>386.209324</td>\n",
       "      <td>358.120508</td>\n",
       "      <td>893.219673</td>\n",
       "      <td>135.104799</td>\n",
       "      <td>374.209324</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                            0  \\\n",
       "id                                                    1035166   \n",
       "charge                                                      1   \n",
       "mz          [45.96, 597.48, 598.5, 599.5, 600.52, 951.77, ...   \n",
       "intensity   [46.35, 51.85, 41.36, 669.33, 40.76, 51.85, 40...   \n",
       "exact_mass                                         1448.97223   \n",
       "\n",
       "                                                            1  \\\n",
       "id                                                    1064281   \n",
       "charge                                                      2   \n",
       "mz          [30.03, 44.05, 44.98, 45.06, 45.98, 47.99, 57....   \n",
       "intensity   [12.89, 18.98, 370.03, 92.31, 11.09, 63.64, 36...   \n",
       "exact_mass                                          152.04419   \n",
       "\n",
       "                                  2  \\\n",
       "id                          1074623   \n",
       "charge                            1   \n",
       "mz          [81.03, 112.05, 308.06]   \n",
       "intensity    [27.37, 999.0, 161.84]   \n",
       "exact_mass               307.056936   \n",
       "\n",
       "                                                            3  \\\n",
       "id                                                    1097402   \n",
       "charge                                                      1   \n",
       "mz          [57.04, 57.07, 58.96, 85.04, 99.99, 118.07, 12...   \n",
       "intensity   [20.38, 42.16, 82.22, 18.08, 52.45, 40.76, 30....   \n",
       "exact_mass                                         261.111341   \n",
       "\n",
       "                                                            4  \\\n",
       "id                                                    1114460   \n",
       "charge                                                      1   \n",
       "mz          [44.05, 59.048, 60.056, 70.065, 73.064, 86.071...   \n",
       "intensity   [49.15, 55.54, 12.59, 95.8, 25.17, 52.65, 977....   \n",
       "exact_mass                                         233.112404   \n",
       "\n",
       "                                                            5  \\\n",
       "id                                                    1140635   \n",
       "charge                                                      1   \n",
       "mz          [50.015, 51.0228, 53.0385, 55.0178, 55.0542, 6...   \n",
       "intensity   [28.17, 44.06, 11.69, 11.89, 9.59, 2.7, 17.08,...   \n",
       "exact_mass                                         386.209324   \n",
       "\n",
       "                                                            6  \\\n",
       "id                                                    1156152   \n",
       "charge                                                      1   \n",
       "mz          [55.018, 65.0387, 68.9971, 77.0384, 78.0464, 7...   \n",
       "intensity   [10.39, 35.86, 3.2, 70.13, 29.57, 8.29, 521.98...   \n",
       "exact_mass                                         358.120508   \n",
       "\n",
       "                                                            7  \\\n",
       "id                                                    1172453   \n",
       "charge                                                     -2   \n",
       "mz          [62.9642, 77.9752, 78.9591, 92.0254, 96.9696, ...   \n",
       "intensity   [1.0, 3.9, 999.0, 13.29, 71.33, 55.94, 1.8, 1....   \n",
       "exact_mass                                         893.219673   \n",
       "\n",
       "                             8  \\\n",
       "id                     1188155   \n",
       "charge                       1   \n",
       "mz          [65.0386, 91.0543]   \n",
       "intensity       [502.1, 999.0]   \n",
       "exact_mass          135.104799   \n",
       "\n",
       "                                                            9  \n",
       "id                                                    1203633  \n",
       "charge                                                     -1  \n",
       "mz          [55.453, 57.0347, 59.014, 65.0397, 67.0553, 68...  \n",
       "intensity   [1.5, 7.59, 29.47, 1.6, 1.7, 1.1, 4.9, 5.79, 1...  \n",
       "exact_mass                                         374.209324  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83d7fea9",
   "metadata": {},
   "source": [
    "# Using NumPy Array\n",
    "\n",
    "Defunct method of transforming an RDKit bitvec into a format suitable for storing in a pyarrow array. While the resulting filesize was smaller, everything else took longer and used more memory.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9e24e23a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# filename = OUTFILENAME+\"_numpy\"\n",
    "# fingerprint_schema = pa.schema(\n",
    "#     [\n",
    "#         pa.field(\"id\", pa.int64()),\n",
    "#         pa.field(\"fingerprint_rep\", pa.list_(pa.int8()))\n",
    "#     ]\n",
    "# )\n",
    "# \n",
    "# def bitvecToArrow(fp):\n",
    "#     fp_numpy = np.zeros((0,), dtype=int)\n",
    "#     DataStructs.ConvertToNumpyArray(fp, fp_numpy)\n",
    "#     return fp_numpy\n",
    "#\n",
    "# def arrowToBitvec(fp):\n",
    "#     bitstring=\"\".join(fp.astype(str))\n",
    "#     return DataStructs.cDataStructs.CreateFromBitString(bitstring)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95c10afd",
   "metadata": {},
   "source": [
    "# Calc fingerprints and store"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "012873ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 9min 3s, sys: 834 ms, total: 9min 4s\n",
      "Wall time: 9min 5s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1888793020"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "fingerprint_schema = pa.schema(\n",
    "    [\n",
    "        pa.field(\"id\", pa.int64()),\n",
    "        pa.field(\"fingerprint_rep\", pa.binary()),\n",
    "        pa.field(\"set\", pa.dictionary(pa.int8(), pa.string()))\n",
    "    ]\n",
    ")\n",
    "\n",
    "def bitvecToArrow(fp):\n",
    "    return DataStructs.cDataStructs.BitVectToBinaryText(fp)\n",
    "\n",
    "def arrowToBitvec(fp):\n",
    "    return DataStructs.cDataStructs.CreateFromBinaryText(fp)\n",
    "\n",
    "def fetch_mz(idx):\n",
    "    x = pc.list_flatten(table.column(\"mz\").slice(idx,1)).to_pandas()\n",
    "    y = pc.list_flatten(table.column(\"intensity\").slice(idx,1)).to_pandas()\n",
    "    df = pd.DataFrame({\"mz\": x, \"intensity\": y})\n",
    "    # Filter by minimum intensity\n",
    "    df = df[df['intensity'] > df['intensity'].max()*MIN_INTENSITY_PERCENT]\n",
    "    return df['mz'].to_numpy()\n",
    "\n",
    "def fetch_spectrum(idx):\n",
    "    x = pc.list_flatten(table.column(\"mz\").slice(idx,1)).to_numpy()\n",
    "    y = pc.list_flatten(table.column(\"intensity\").slice(idx,1)).to_numpy()\n",
    "    return spectrum.init_spectrum(True, mz=x, intensity=y)\n",
    "\n",
    "def calc_fingerprint(mz):\n",
    "    def calc_bit(a, b):\n",
    "        return int(abs(b-a)*10)\n",
    "    fp = DataStructs.ExplicitBitVect(20000)\n",
    "    len_mz = len(mz)\n",
    "    if USE_MZ_ZERO:\n",
    "        for i in range(len_mz):\n",
    "            #print(0, mz[i], calc_bit(0,mz[i]))\n",
    "            fp.SetBit(calc_bit(0,mz[i]))\n",
    "    for i in range(len_mz):\n",
    "        for j in range(i+1,len_mz):\n",
    "            #print(mz[i], mz[j], calc_bit(mz[i],mz[j]))\n",
    "            fp.SetBit(calc_bit(mz[i],mz[j]))\n",
    "    return fp\n",
    "\n",
    "ids = []\n",
    "fingerprints = []\n",
    "tables = []\n",
    "for i in range(len(table)):\n",
    "    ids.append(table.column(\"id\").slice(i,1).to_pandas()[0])\n",
    "    mz = fetch_mz(i)\n",
    "    fp = bitvecToArrow(calc_fingerprint(mz))\n",
    "    fingerprints.append(fp)\n",
    "    if (len(ids) >= 25000):\n",
    "        tables.append(pa.table({\"id\": ids, \"fingerprint_rep\": fingerprints}, schema=fingerprint_schema))\n",
    "        ids = []\n",
    "        fingerprints = []\n",
    "    #print(sys.getsizeof(fp))\n",
    "    #print(DataStructs.cDataStructs.BitVectToText(fp))\n",
    "if (len(ids) > 0):\n",
    "    tables.append(pa.table({\"id\": ids, \"fingerprint_rep\": fingerprints}, schema=fingerprint_schema))\n",
    "    ids = []\n",
    "    fingerprints = []\n",
    "fp_table = pa.concat_tables(tables)   \n",
    "#fp_table = pa.table(\n",
    "#    {\n",
    "#        \"id\": table.column(\"id\"),\n",
    "#        \"fingerprint\": fingerprints\n",
    "#    }, schema=fingerprint_schema)\n",
    "#fp_table.to_pandas()\n",
    "pq.write_table(fp_table, OUTFILENAME, row_group_size=250000, version=\"2.0\")\n",
    "fp_table.nbytes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b9385d9",
   "metadata": {},
   "source": [
    "# Read fingerprints from the store and convert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "24c778fa",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "byte indices must be integers or slices, not list",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: byte indices must be integers or slices, not list"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "fp_table2 = pq.read_table(OUTFILENAME)\n",
    "fp_df = fp_table2.to_pandas()\n",
    "fp_df = fp_df.assign(fingerprint=fp_df['fingerprint_rep'].apply(arrowToBitvec))\n",
    "fp_df = fp[['id', 'fingerprint']]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "977095a7",
   "metadata": {},
   "source": [
    "# Tanimoto vs. Cosine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cc46c11a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<svg height=\"144pt\" version=\"1.1\" viewBox=\"0 0 288 144\" width=\"288pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       " <metadata>\n",
       "  <rdf:RDF xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n",
       "   <cc:Work>\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n",
       "    <dc:date>2021-07-08T14:14:25.307276</dc:date>\n",
       "    <dc:format>image/svg+xml</dc:format>\n",
       "    <dc:creator>\n",
       "     <cc:Agent>\n",
       "      <dc:title>Matplotlib v3.4.2, https://matplotlib.org/</dc:title>\n",
       "     </cc:Agent>\n",
       "    </dc:creator>\n",
       "   </cc:Work>\n",
       "  </rdf:RDF>\n",
       " </metadata>\n",
       " <defs>\n",
       "  <style type=\"text/css\">*{stroke-linecap:butt;stroke-linejoin:round;}</style>\n",
       " </defs>\n",
       " <g id=\"figure_1\">\n",
       "  <g id=\"patch_1\">\n",
       "   <path d=\"M 0 144 \n",
       "L 288 144 \n",
       "L 288 0 \n",
       "L 0 0 \n",
       "z\n",
       "\" style=\"fill:none;\"/>\n",
       "  </g>\n",
       "  <g id=\"axes_1\">\n",
       "   <g id=\"patch_2\">\n",
       "    <path d=\"M 50.925 102.2 \n",
       "L 264.45 102.2 \n",
       "L 264.45 10.8 \n",
       "L 50.925 10.8 \n",
       "z\n",
       "\" style=\"fill:#ffffff;\"/>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_1\">\n",
       "    <g id=\"xtick_1\">\n",
       "     <g id=\"line2d_1\">\n",
       "      <defs>\n",
       "       <path d=\"M 0 0 \n",
       "L 0 3.5 \n",
       "\" id=\"m865462eff5\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.925\" xlink:href=\"#m865462eff5\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_1\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(47.74375 116.798437)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path d=\"M 2034 4250 \n",
       "Q 1547 4250 1301 3770 \n",
       "Q 1056 3291 1056 2328 \n",
       "Q 1056 1369 1301 889 \n",
       "Q 1547 409 2034 409 \n",
       "Q 2525 409 2770 889 \n",
       "Q 3016 1369 3016 2328 \n",
       "Q 3016 3291 2770 3770 \n",
       "Q 2525 4250 2034 4250 \n",
       "z\n",
       "M 2034 4750 \n",
       "Q 2819 4750 3233 4129 \n",
       "Q 3647 3509 3647 2328 \n",
       "Q 3647 1150 3233 529 \n",
       "Q 2819 -91 2034 -91 \n",
       "Q 1250 -91 836 529 \n",
       "Q 422 1150 422 2328 \n",
       "Q 422 3509 836 4129 \n",
       "Q 1250 4750 2034 4750 \n",
       "z\n",
       "\" id=\"DejaVuSans-30\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_2\">\n",
       "     <g id=\"line2d_2\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"104.30625\" xlink:href=\"#m865462eff5\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_2\">\n",
       "      <!-- 500 -->\n",
       "      <g transform=\"translate(94.7625 116.798437)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path d=\"M 691 4666 \n",
       "L 3169 4666 \n",
       "L 3169 4134 \n",
       "L 1269 4134 \n",
       "L 1269 2991 \n",
       "Q 1406 3038 1543 3061 \n",
       "Q 1681 3084 1819 3084 \n",
       "Q 2600 3084 3056 2656 \n",
       "Q 3513 2228 3513 1497 \n",
       "Q 3513 744 3044 326 \n",
       "Q 2575 -91 1722 -91 \n",
       "Q 1428 -91 1123 -41 \n",
       "Q 819 9 494 109 \n",
       "L 494 744 \n",
       "Q 775 591 1075 516 \n",
       "Q 1375 441 1709 441 \n",
       "Q 2250 441 2565 725 \n",
       "Q 2881 1009 2881 1497 \n",
       "Q 2881 1984 2565 2268 \n",
       "Q 2250 2553 1709 2553 \n",
       "Q 1456 2553 1204 2497 \n",
       "Q 953 2441 691 2322 \n",
       "L 691 4666 \n",
       "z\n",
       "\" id=\"DejaVuSans-35\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_3\">\n",
       "     <g id=\"line2d_3\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"157.6875\" xlink:href=\"#m865462eff5\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_3\">\n",
       "      <!-- 1000 -->\n",
       "      <g transform=\"translate(144.9625 116.798437)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path d=\"M 794 531 \n",
       "L 1825 531 \n",
       "L 1825 4091 \n",
       "L 703 3866 \n",
       "L 703 4441 \n",
       "L 1819 4666 \n",
       "L 2450 4666 \n",
       "L 2450 531 \n",
       "L 3481 531 \n",
       "L 3481 0 \n",
       "L 794 0 \n",
       "L 794 531 \n",
       "z\n",
       "\" id=\"DejaVuSans-31\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_4\">\n",
       "     <g id=\"line2d_4\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"211.06875\" xlink:href=\"#m865462eff5\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_4\">\n",
       "      <!-- 1500 -->\n",
       "      <g transform=\"translate(198.34375 116.798437)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_5\">\n",
       "     <g id=\"line2d_5\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"264.45\" xlink:href=\"#m865462eff5\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_5\">\n",
       "      <!-- 2000 -->\n",
       "      <g transform=\"translate(251.725 116.798437)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path d=\"M 1228 531 \n",
       "L 3431 531 \n",
       "L 3431 0 \n",
       "L 469 0 \n",
       "L 469 531 \n",
       "Q 828 903 1448 1529 \n",
       "Q 2069 2156 2228 2338 \n",
       "Q 2531 2678 2651 2914 \n",
       "Q 2772 3150 2772 3378 \n",
       "Q 2772 3750 2511 3984 \n",
       "Q 2250 4219 1831 4219 \n",
       "Q 1534 4219 1204 4116 \n",
       "Q 875 4013 500 3803 \n",
       "L 500 4441 \n",
       "Q 881 4594 1212 4672 \n",
       "Q 1544 4750 1819 4750 \n",
       "Q 2544 4750 2975 4387 \n",
       "Q 3406 4025 3406 3419 \n",
       "Q 3406 3131 3298 2873 \n",
       "Q 3191 2616 2906 2266 \n",
       "Q 2828 2175 2409 1742 \n",
       "Q 1991 1309 1228 531 \n",
       "z\n",
       "\" id=\"DejaVuSans-32\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_6\">\n",
       "     <!-- m/z -->\n",
       "     <g transform=\"translate(148.508594 130.476562)scale(0.1 -0.1)\">\n",
       "      <defs>\n",
       "       <path d=\"M 3328 2828 \n",
       "Q 3544 3216 3844 3400 \n",
       "Q 4144 3584 4550 3584 \n",
       "Q 5097 3584 5394 3201 \n",
       "Q 5691 2819 5691 2113 \n",
       "L 5691 0 \n",
       "L 5113 0 \n",
       "L 5113 2094 \n",
       "Q 5113 2597 4934 2840 \n",
       "Q 4756 3084 4391 3084 \n",
       "Q 3944 3084 3684 2787 \n",
       "Q 3425 2491 3425 1978 \n",
       "L 3425 0 \n",
       "L 2847 0 \n",
       "L 2847 2094 \n",
       "Q 2847 2600 2669 2842 \n",
       "Q 2491 3084 2119 3084 \n",
       "Q 1678 3084 1418 2786 \n",
       "Q 1159 2488 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1356 3278 1631 3431 \n",
       "Q 1906 3584 2284 3584 \n",
       "Q 2666 3584 2933 3390 \n",
       "Q 3200 3197 3328 2828 \n",
       "z\n",
       "\" id=\"DejaVuSans-6d\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 1625 4666 \n",
       "L 2156 4666 \n",
       "L 531 -594 \n",
       "L 0 -594 \n",
       "L 1625 4666 \n",
       "z\n",
       "\" id=\"DejaVuSans-2f\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 353 3500 \n",
       "L 3084 3500 \n",
       "L 3084 2975 \n",
       "L 922 459 \n",
       "L 3084 459 \n",
       "L 3084 0 \n",
       "L 275 0 \n",
       "L 275 525 \n",
       "L 2438 3041 \n",
       "L 353 3041 \n",
       "L 353 3500 \n",
       "z\n",
       "\" id=\"DejaVuSans-7a\" transform=\"scale(0.015625)\"/>\n",
       "      </defs>\n",
       "      <use xlink:href=\"#DejaVuSans-6d\"/>\n",
       "      <use x=\"97.412109\" xlink:href=\"#DejaVuSans-2f\"/>\n",
       "      <use x=\"131.103516\" xlink:href=\"#DejaVuSans-7a\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_2\">\n",
       "    <g id=\"ytick_1\">\n",
       "     <g id=\"line2d_6\">\n",
       "      <defs>\n",
       "       <path d=\"M 0 0 \n",
       "L -3.5 0 \n",
       "\" id=\"mc0f2dff80a\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.925\" xlink:href=\"#mc0f2dff80a\" y=\"102.2\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_7\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(37.5625 105.999219)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_2\">\n",
       "     <g id=\"line2d_7\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.925\" xlink:href=\"#mc0f2dff80a\" y=\"79.327127\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_8\">\n",
       "      <!-- 250 -->\n",
       "      <g transform=\"translate(24.8375 83.126346)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_3\">\n",
       "     <g id=\"line2d_8\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.925\" xlink:href=\"#mc0f2dff80a\" y=\"56.454254\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_9\">\n",
       "      <!-- 500 -->\n",
       "      <g transform=\"translate(24.8375 60.253473)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_4\">\n",
       "     <g id=\"line2d_9\">\n",
       "      <g>\n",
       "       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"50.925\" xlink:href=\"#mc0f2dff80a\" y=\"33.581381\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_10\">\n",
       "      <!-- 750 -->\n",
       "      <g transform=\"translate(24.8375 37.3806)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path d=\"M 525 4666 \n",
       "L 3525 4666 \n",
       "L 3525 4397 \n",
       "L 1831 0 \n",
       "L 1172 0 \n",
       "L 2766 4134 \n",
       "L 525 4134 \n",
       "L 525 4666 \n",
       "z\n",
       "\" id=\"DejaVuSans-37\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-37\"/>\n",
       "       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-35\"/>\n",
       "       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"text_11\">\n",
       "     <!-- Intensity -->\n",
       "     <g transform=\"translate(18.757812 78.2625)rotate(-90)scale(0.1 -0.1)\">\n",
       "      <defs>\n",
       "       <path d=\"M 628 4666 \n",
       "L 1259 4666 \n",
       "L 1259 0 \n",
       "L 628 0 \n",
       "L 628 4666 \n",
       "z\n",
       "\" id=\"DejaVuSans-49\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 3513 2113 \n",
       "L 3513 0 \n",
       "L 2938 0 \n",
       "L 2938 2094 \n",
       "Q 2938 2591 2744 2837 \n",
       "Q 2550 3084 2163 3084 \n",
       "Q 1697 3084 1428 2787 \n",
       "Q 1159 2491 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1366 3272 1645 3428 \n",
       "Q 1925 3584 2291 3584 \n",
       "Q 2894 3584 3203 3211 \n",
       "Q 3513 2838 3513 2113 \n",
       "z\n",
       "\" id=\"DejaVuSans-6e\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 1172 4494 \n",
       "L 1172 3500 \n",
       "L 2356 3500 \n",
       "L 2356 3053 \n",
       "L 1172 3053 \n",
       "L 1172 1153 \n",
       "Q 1172 725 1289 603 \n",
       "Q 1406 481 1766 481 \n",
       "L 2356 481 \n",
       "L 2356 0 \n",
       "L 1766 0 \n",
       "Q 1100 0 847 248 \n",
       "Q 594 497 594 1153 \n",
       "L 594 3053 \n",
       "L 172 3053 \n",
       "L 172 3500 \n",
       "L 594 3500 \n",
       "L 594 4494 \n",
       "L 1172 4494 \n",
       "z\n",
       "\" id=\"DejaVuSans-74\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 3597 1894 \n",
       "L 3597 1613 \n",
       "L 953 1613 \n",
       "Q 991 1019 1311 708 \n",
       "Q 1631 397 2203 397 \n",
       "Q 2534 397 2845 478 \n",
       "Q 3156 559 3463 722 \n",
       "L 3463 178 \n",
       "Q 3153 47 2828 -22 \n",
       "Q 2503 -91 2169 -91 \n",
       "Q 1331 -91 842 396 \n",
       "Q 353 884 353 1716 \n",
       "Q 353 2575 817 3079 \n",
       "Q 1281 3584 2069 3584 \n",
       "Q 2775 3584 3186 3129 \n",
       "Q 3597 2675 3597 1894 \n",
       "z\n",
       "M 3022 2063 \n",
       "Q 3016 2534 2758 2815 \n",
       "Q 2500 3097 2075 3097 \n",
       "Q 1594 3097 1305 2825 \n",
       "Q 1016 2553 972 2059 \n",
       "L 3022 2063 \n",
       "z\n",
       "\" id=\"DejaVuSans-65\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 2834 3397 \n",
       "L 2834 2853 \n",
       "Q 2591 2978 2328 3040 \n",
       "Q 2066 3103 1784 3103 \n",
       "Q 1356 3103 1142 2972 \n",
       "Q 928 2841 928 2578 \n",
       "Q 928 2378 1081 2264 \n",
       "Q 1234 2150 1697 2047 \n",
       "L 1894 2003 \n",
       "Q 2506 1872 2764 1633 \n",
       "Q 3022 1394 3022 966 \n",
       "Q 3022 478 2636 193 \n",
       "Q 2250 -91 1575 -91 \n",
       "Q 1294 -91 989 -36 \n",
       "Q 684 19 347 128 \n",
       "L 347 722 \n",
       "Q 666 556 975 473 \n",
       "Q 1284 391 1588 391 \n",
       "Q 1994 391 2212 530 \n",
       "Q 2431 669 2431 922 \n",
       "Q 2431 1156 2273 1281 \n",
       "Q 2116 1406 1581 1522 \n",
       "L 1381 1569 \n",
       "Q 847 1681 609 1914 \n",
       "Q 372 2147 372 2553 \n",
       "Q 372 3047 722 3315 \n",
       "Q 1072 3584 1716 3584 \n",
       "Q 2034 3584 2315 3537 \n",
       "Q 2597 3491 2834 3397 \n",
       "z\n",
       "\" id=\"DejaVuSans-73\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 603 3500 \n",
       "L 1178 3500 \n",
       "L 1178 0 \n",
       "L 603 0 \n",
       "L 603 3500 \n",
       "z\n",
       "M 603 4863 \n",
       "L 1178 4863 \n",
       "L 1178 4134 \n",
       "L 603 4134 \n",
       "L 603 4863 \n",
       "z\n",
       "\" id=\"DejaVuSans-69\" transform=\"scale(0.015625)\"/>\n",
       "       <path d=\"M 2059 -325 \n",
       "Q 1816 -950 1584 -1140 \n",
       "Q 1353 -1331 966 -1331 \n",
       "L 506 -1331 \n",
       "L 506 -850 \n",
       "L 844 -850 \n",
       "Q 1081 -850 1212 -737 \n",
       "Q 1344 -625 1503 -206 \n",
       "L 1606 56 \n",
       "L 191 3500 \n",
       "L 800 3500 \n",
       "L 1894 763 \n",
       "L 2988 3500 \n",
       "L 3597 3500 \n",
       "L 2059 -325 \n",
       "z\n",
       "\" id=\"DejaVuSans-79\" transform=\"scale(0.015625)\"/>\n",
       "      </defs>\n",
       "      <use xlink:href=\"#DejaVuSans-49\"/>\n",
       "      <use x=\"29.492188\" xlink:href=\"#DejaVuSans-6e\"/>\n",
       "      <use x=\"92.871094\" xlink:href=\"#DejaVuSans-74\"/>\n",
       "      <use x=\"132.080078\" xlink:href=\"#DejaVuSans-65\"/>\n",
       "      <use x=\"193.603516\" xlink:href=\"#DejaVuSans-6e\"/>\n",
       "      <use x=\"256.982422\" xlink:href=\"#DejaVuSans-73\"/>\n",
       "      <use x=\"309.082031\" xlink:href=\"#DejaVuSans-69\"/>\n",
       "      <use x=\"336.865234\" xlink:href=\"#DejaVuSans-74\"/>\n",
       "      <use x=\"376.074219\" xlink:href=\"#DejaVuSans-79\"/>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"LineCollection_1\">\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 55.090873 100.326254 \n",
       "L 55.090873 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 55.728245 101.167061 \n",
       "L 55.728245 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 56.372023 97.30978 \n",
       "L 56.372023 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 57.867765 45.806474 \n",
       "L 57.867765 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 57.975596 100.85599 \n",
       "L 57.975596 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 58.083426 99.540342 \n",
       "L 58.083426 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 58.934323 99.823966 \n",
       "L 58.934323 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 59.148915 10.8 \n",
       "L 59.148915 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 60.751421 49.736034 \n",
       "L 60.751421 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 60.859251 79.24021 \n",
       "L 60.859251 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 60.967081 65.338078 \n",
       "L 60.967081 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 61.922605 100.929183 \n",
       "L 61.922605 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 63.740771 55.220034 \n",
       "L 63.740771 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 63.845398 98.809325 \n",
       "L 63.845398 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "    <path clip-path=\"url(#p4b8ad2d957)\" d=\"M 65.663563 94.202729 \n",
       "L 65.663563 102.2 \n",
       "\" style=\"fill:none;stroke:#0000ff;\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_3\">\n",
       "    <path d=\"M 50.925 102.2 \n",
       "L 50.925 10.8 \n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_4\">\n",
       "    <path d=\"M 264.45 102.2 \n",
       "L 264.45 10.8 \n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_5\">\n",
       "    <path d=\"M 50.925 102.2 \n",
       "L 264.45 102.2 \n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_6\">\n",
       "    <path d=\"M 50.925 10.8 \n",
       "L 264.45 10.8 \n",
       "\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n",
       "   </g>\n",
       "  </g>\n",
       " </g>\n",
       " <defs>\n",
       "  <clipPath id=\"p4b8ad2d957\">\n",
       "   <rect height=\"91.4\" width=\"213.525\" x=\"50.925\" y=\"10.8\"/>\n",
       "  </clipPath>\n",
       " </defs>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<spectrum None; 15 ions>"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_idx = 5400\n",
    "query_fp = fp_df['fingerprint'][query_idx]\n",
    "query_spec = fetch_spectrum(query_idx)\n",
    "query_spec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a14de75c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.11 s, sys: 15.9 ms, total: 1.13 s\n",
      "Wall time: 1.13 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df = fp_df.assign(tanimoto=DataStructs.cDataStructs.BulkTanimotoSimilarity(query_fp, fp_df['fingerprint']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c4adf7ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2min 9s, sys: 25.1 ms, total: 2min 9s\n",
      "Wall time: 2min 9s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "cosine_score = []\n",
    "for i in range(len(table)):\n",
    "    spec = fetch_spectrum(i)\n",
    "    cosine_score.append(query_spec.cosine_score(spec))\n",
    "df = df.assign(cosine=cosine_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "24430502",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035166</td>\n",
       "      <td>0.064935</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035167</td>\n",
       "      <td>0.102041</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035168</td>\n",
       "      <td>0.023810</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035169</td>\n",
       "      <td>0.025000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035170</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751903</th>\n",
       "      <td>3485111</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751904</th>\n",
       "      <td>3485112</td>\n",
       "      <td>0.024390</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751905</th>\n",
       "      <td>3485113</td>\n",
       "      <td>0.024390</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751906</th>\n",
       "      <td>3485114</td>\n",
       "      <td>0.024390</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751907</th>\n",
       "      <td>3485115</td>\n",
       "      <td>0.032520</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>751908 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  tanimoto  cosine\n",
       "0       1035166  0.064935     0.0\n",
       "1       1035167  0.102041     0.0\n",
       "2       1035168  0.023810     0.0\n",
       "3       1035169  0.025000     0.0\n",
       "4       1035170  0.026316     0.0\n",
       "...         ...       ...     ...\n",
       "751903  3485111  0.026316     0.0\n",
       "751904  3485112  0.024390     0.0\n",
       "751905  3485113  0.024390     0.0\n",
       "751906  3485114  0.024390     0.0\n",
       "751907  3485115  0.032520     0.0\n",
       "\n",
       "[751908 rows x 3 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['id','tanimoto', 'cosine']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "30c8aad0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tanimoto</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.039608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cosine</th>\n",
       "      <td>0.039608</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          tanimoto    cosine\n",
       "tanimoto  1.000000  0.039608\n",
       "cosine    0.039608  1.000000"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['tanimoto', 'cosine']].corr(method='pearson')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "e84f0c3b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZgAAAD4CAYAAADRuPC7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUDElEQVR4nO3df7BndX3f8edL1h/QRFxgocwu5GLcqOhohBWYmrQKDaySiGmx3TQNO5bJNoZ2zNSZCk4mG2WYgT9aDJOiIbrDj7SBDTpCYiizgarthF9LgyIgZRsIbGFkdSmgUcjiu398P7d893r33rNwP9/rvft8zHzne877nM85nw/sfF/3/Pieb6oKSZIW2isWuwOSpOXJgJEkdWHASJK6MGAkSV0YMJKkLlYsdgd+XBxxxBE1NTW12N2QpCXl7rvv/nZVrZptmQHTTE1NsX379sXuhiQtKUn+Zl/LPEUmSerCgJEkdWHASJK6MGAkSV0YMJKkLgwYSVIXBowkqQsDRpLUhQEjSerCb/IvkKnzv7Qo+33k4jMXZb+SNB+PYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpi+4Bk+SgJH+V5M/a/GFJtiV5qL2vHFv3giQ7kjyY5Iyx+olJ7m3LLkuSVn91kuta/Y4kU2NtNrZ9PJRkY+9xSpL2NokjmI8AD4zNnw/cUlVrgVvaPEmOBzYAbwHWA5cnOai1+TSwCVjbXutb/Vzgqap6A3ApcEnb1mHAZuBk4CRg83iQSZL66xowSdYAZwKfHSufBVzVpq8CPjBWv7aqnquqh4EdwElJjgZeW1W3VVUBV89oM72t64HT2tHNGcC2qtpdVU8B23gxlCRJE9D7COZTwL8HfjhWO6qqngBo70e2+mrgsbH1drba6jY9s75Xm6raAzwNHD7HtvaSZFOS7Um279q16yUMT5K0L90CJskvAk9W1d1Dm8xSqznqL7XNi4WqK6pqXVWtW7Vq1cBuSpKG6HkE8y7g/UkeAa4FTk3yR8C32mkv2vuTbf2dwDFj7dcAj7f6mlnqe7VJsgI4FNg9x7YkSRPSLWCq6oKqWlNVU4wu3t9aVf8SuBGYvqtrI3BDm74R2NDuDDuO0cX8O9tptGeTnNKur5wzo830ts5u+yjgZuD0JCvbxf3TW02SNCErFmGfFwNbk5wLPAp8EKCq7kuyFbgf2AOcV1UvtDYfBq4EDgZuai+AzwHXJNnB6MhlQ9vW7iQXAne19T5ZVbt7D0yS9KKJBExVfRn4cpv+DnDaPta7CLholvp24K2z1H9AC6hZlm0BtrzUPkuSXh6/yS9J6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpi24Bk+Q1Se5M8rUk9yX5RKsflmRbkofa+8qxNhck2ZHkwSRnjNVPTHJvW3ZZkrT6q5Nc1+p3JJkaa7Ox7eOhJBt7jVOSNLueRzDPAadW1duBnwXWJzkFOB+4parWAre0eZIcD2wA3gKsBy5PclDb1qeBTcDa9lrf6ucCT1XVG4BLgUvatg4DNgMnAycBm8eDTJLUX7eAqZHvttlXtlcBZwFXtfpVwAfa9FnAtVX1XFU9DOwATkpyNPDaqrqtqgq4ekab6W1dD5zWjm7OALZV1e6qegrYxouhJEmagK7XYJIclOQe4ElGH/h3AEdV1RMA7f3Itvpq4LGx5jtbbXWbnlnfq01V7QGeBg6fY1sz+7cpyfYk23ft2vUyRipJmqlrwFTVC1X1s8AaRkcjb51j9cy2iTnqL7XNeP+uqKp1VbVu1apVc3RNkrS/JnIXWVX9X+DLjE5Tfaud9qK9P9lW2wkcM9ZsDfB4q6+Zpb5XmyQrgEOB3XNsS5I0IT3vIluV5HVt+mDgHwPfBG4Epu/q2gjc0KZvBDa0O8OOY3Qx/852Gu3ZJKe06yvnzGgzva2zgVvbdZqbgdOTrGwX909vNUnShKzouO2jgavanWCvALZW1Z8luQ3YmuRc4FHggwBVdV+SrcD9wB7gvKp6oW3rw8CVwMHATe0F8DngmiQ7GB25bGjb2p3kQuCutt4nq2p3x7FKkmboFjBV9XXgHbPUvwOcto82FwEXzVLfDvzI9Zuq+gEtoGZZtgXYsn+9liQtFL/JL0nqwoCRJHVhwEiSujBgJEldGDCSpC4GBcw838CXJOlHDD2C+Ux79P5vTn95UpKkuQwKmKr6OeBXGT1+ZXuS/5LkF7r2TJK0pA2+BlNVDwG/DXwM+EfAZUm+meSf9OqcJGnpGnoN5m1JLgUeAE4Ffqmq3tymL+3YP0nSEjX0UTG/D/wh8PGq+v50saoeT/LbXXomSVrShgbM+4DvTz98MskrgNdU1d9W1TXdeidJWrKGXoP5C0ZPMp52SKtJkjSroQHzmqr67vRMmz6kT5ckScvB0ID5XpITpmeSnAh8f471JUkHuKHXYH4L+JMk0z87fDTwz7v0SJK0LAwKmKq6K8mbgDcCAb5ZVX/XtWeSpCVtf37R8p3AVGvzjiRU1dVdeiVJWvIGBUySa4CfBu4BXmjlAgwYSdKshh7BrAOOr6rq2RlJ0vIx9C6ybwB/v2dHJEnLy9AjmCOA+5PcCTw3Xayq93fplSRpyRsaML/bsxN66abO/9Ki7fuRi89ctH1L+vE39DblryT5KWBtVf1FkkOAg/p2TZK0lA19XP+vA9cDf9BKq4EvduqTJGkZGHqR/zzgXcAz8P9/fOzIXp2SJC19QwPmuap6fnomyQpG34ORJGlWQwPmK0k+Dhyc5BeAPwH+tF+3JElL3dCAOR/YBdwL/GvgzwF/yVKStE9D7yL7IaOfTP7Dvt2RJC0XQ59F9jCzXHOpqtcveI8kScvC/jyLbNprgA8Chy18dyRJy8WgazBV9Z2x1/+pqk8Bp/btmiRpKRt6iuyEsdlXMDqi+ckuPZIkLQtDT5H9h7HpPcAjwD9b8N5IkpaNoXeRvad3RyRJy8vQU2T/bq7lVfUfF6Y7kqTlYn/uInsncGOb/yXgq8BjPTolSVr6hn6T/wjghKr6aFV9FDgRWFNVn6iqT8zWIMkxSf5bkgeS3JfkI61+WJJtSR5q7yvH2lyQZEeSB5OcMVY/Mcm9bdllSdLqr05yXavfkWRqrM3Gto+Hkmzc7/8ykqSXZWjAHAs8Pzb/PDA1T5s9wEer6s3AKcB5SY5n9NiZW6pqLXBLm6ct2wC8BVgPXJ5k+jdnPg1sAta21/pWPxd4qqreAFwKXNK2dRiwGTgZOAnYPB5kkqT+hgbMNcCdSX43yWbgDuDquRpU1RNV9T/b9LPAA4x+R+Ys4Kq22lXAB9r0WcC1VfVcVT0M7ABOSnI08Nqquq2qqu13vM30tq4HTmtHN2cA26pqd1U9BWzjxVCSJE3A0LvILkpyE/DzrfShqvqroTtpp67ewSiYjqqqJ9p2n0gy/bsyq4Hbx5rtbLW/a9Mz69NtHmvb2pPkaeDw8fosbcb7tYnRkRHHHnvs0OFIkgYYegQDcAjwTFX9HrAzyXFDGiX5CeDzwG9V1TNzrTpLreaov9Q2LxaqrqiqdVW1btWqVXN0TZK0v4b+ZPJm4GPABa30SuCPBrR7JaNw+c9V9YVW/lY77UV7f7LVdwLHjDVfAzze6mtmqe/Vpv0I2qHA7jm2JUmakKFHML8MvB/4HkBVPc48j4pp10I+Bzww43syNwLTd3VtBG4Yq29od4Ydx+hi/p3tdNqzSU5p2zxnRpvpbZ0N3Nqu09wMnJ5kZbu4f3qrSZImZOj3YJ6vqkpSAEn+3oA27wJ+Dbg3yT2t9nHgYmBrknOBRxk9mZmqui/JVuB+RnegnVdVL7R2HwauBA4GbmovGAXYNUl2MDpy2dC2tTvJhcBdbb1PVtXugWOVJC2AoQGzNckfAK9L8uvAv2KeHx+rqv/B7NdCAE7bR5uLgItmqW8H3jpL/Qe0gJpl2RZgy1x9lCT1M2/AtNNS1wFvAp4B3gj8TlVt69w3SdISNm/AtFNjX6yqExl9n0SSpHkNvch/e5J3du2JJGlZGXoN5j3AbyR5hNGdZGF0cPO2Xh2TJC1tcwZMkmOr6lHgvRPqjyRpmZjvCOaLjJ6i/DdJPl9V/3QCfZIkLQPzXYMZv8349T07IklaXuYLmNrHtCRJc5rvFNnbkzzD6Ejm4DYNL17kf23X3kmSlqw5A6aqDppruSRJ+7I/j+uXJGkwA0aS1IUBI0nqwoCRJHVhwEiSujBgJEldGDCSpC4MGElSFwaMJKkLA0aS1IUBI0nqwoCRJHVhwEiSujBgJEldGDCSpC4MGElSFwaMJKkLA0aS1IUBI0nqwoCRJHVhwEiSujBgJEldGDCSpC4MGElSFwaMJKkLA0aS1IUBI0nqwoCRJHVhwEiSuugWMEm2JHkyyTfGaocl2Zbkofa+cmzZBUl2JHkwyRlj9ROT3NuWXZYkrf7qJNe1+h1JpsbabGz7eCjJxl5jlCTtW88jmCuB9TNq5wO3VNVa4JY2T5LjgQ3AW1qby5Mc1Np8GtgErG2v6W2eCzxVVW8ALgUuads6DNgMnAycBGweDzJJ0mR0C5iq+iqwe0b5LOCqNn0V8IGx+rVV9VxVPQzsAE5KcjTw2qq6raoKuHpGm+ltXQ+c1o5uzgC2VdXuqnoK2MaPBp0kqbNJX4M5qqqeAGjvR7b6auCxsfV2ttrqNj2zvlebqtoDPA0cPse2fkSSTUm2J9m+a9eulzEsSdJMPy4X+TNLreaov9Q2exerrqiqdVW1btWqVYM6KkkaZtIB86122ov2/mSr7wSOGVtvDfB4q6+Zpb5XmyQrgEMZnZLb17YkSRM06YC5EZi+q2sjcMNYfUO7M+w4Rhfz72yn0Z5Nckq7vnLOjDbT2zobuLVdp7kZOD3JynZx//RWkyRN0IpeG07yx8C7gSOS7GR0Z9fFwNYk5wKPAh8EqKr7kmwF7gf2AOdV1QttUx9mdEfawcBN7QXwOeCaJDsYHblsaNvaneRC4K623ieraubNBpKkzroFTFX9yj4WnbaP9S8CLpqlvh146yz1H9ACapZlW4AtgzsrSVpwPy4X+SVJy4wBI0nqwoCRJHVhwEiSujBgJEldGDCSpC4MGElSFwaMJKkLA0aS1EW3b/Jr+Zs6/0uLst9HLj5zUfYraf94BCNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuDBhJUhcGjCSpCwNGktSFASNJ6sKAkSR1YcBIkrowYCRJXRgwkqQuVix2B3pKsh74PeAg4LNVdfEid0kLYOr8Ly3Kfh+5+MxF2a+0VC3bI5gkBwH/CXgvcDzwK0mOX9xeSdKBY9kGDHASsKOq/rqqngeuBc5a5D5J0gFjOZ8iWw08Nja/Ezh5fIUkm4BNbfa7SR58Gfs7Avj2y2i/FB1QY84lB9Z4G8d8YHg5Y/6pfS1YzgGTWWq110zVFcAVC7KzZHtVrVuIbS0VB9qYD7TxgmM+UPQa83I+RbYTOGZsfg3w+CL1RZIOOMs5YO4C1iY5LsmrgA3AjYvcJ0k6YCzbU2RVtSfJvwFuZnSb8paquq/jLhfkVNsSc6CN+UAbLzjmA0WXMaeq5l9LkqT9tJxPkUmSFpEBI0nqwoDZD0nWJ3kwyY4k58+yPEkua8u/nuSExejnQhow5l9tY/16kr9M8vbF6OdCmm/MY+u9M8kLSc6eZP96GDLmJO9Ock+S+5J8ZdJ9XGgD/m0fmuRPk3ytjflDi9HPhZJkS5Ink3xjH8sX/vOrqnwNeDG6UeB/A68HXgV8DTh+xjrvA25i9B2cU4A7FrvfExjzPwBWtun3HghjHlvvVuDPgbMXu98T+P/8OuB+4Ng2f+Ri93sCY/44cEmbXgXsBl612H1/GWP+h8AJwDf2sXzBP788ghluyKNnzgKurpHbgdclOXrSHV1A8465qv6yqp5qs7cz+r7RUjb0EUP/Fvg88OQkO9fJkDH/C+ALVfUoQFUt9XEPGXMBP5kkwE8wCpg9k+3mwqmqrzIaw74s+OeXATPcbI+eWf0S1llK9nc85zL6C2gpm3fMSVYDvwx8ZoL96mnI/+efAVYm+XKSu5OcM7He9TFkzL8PvJnRF7TvBT5SVT+cTPcWxYJ/fi3b78F0MO+jZwaus5QMHk+S9zAKmJ/r2qP+hoz5U8DHquqF0R+3S96QMa8ATgROAw4Gbktye1X9r96d62TImM8A7gFOBX4a2Jbkv1fVM537tlgW/PPLgBluyKNnltvjaQaNJ8nbgM8C762q70yob70MGfM64NoWLkcA70uyp6q+OJEeLryh/7a/XVXfA76X5KvA24GlGjBDxvwh4OIaXaDYkeRh4E3AnZPp4sQt+OeXp8iGG/LomRuBc9rdGKcAT1fVE5Pu6AKad8xJjgW+APzaEv5rdty8Y66q46pqqqqmgOuB31zC4QLD/m3fAPx8khVJDmH0ZPIHJtzPhTRkzI8yOmIjyVHAG4G/nmgvJ2vBP788ghmo9vHomSS/0ZZ/htEdRe8DdgB/y+gvoCVr4Jh/BzgcuLz9Rb+nlvCTaAeOeVkZMuaqeiDJfwW+DvyQ0S/Eznq761Iw8P/zhcCVSe5ldProY1W1ZB/jn+SPgXcDRyTZCWwGXgn9Pr98VIwkqQtPkUmSujBgJEldGDCSpC4MGElSFwaMJKkLA0aS1IUBI0nq4v8B3JpH6IRKIjMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['tanimoto'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ca8e754a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['cosine'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "cbc13518",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7.188000e+03</td>\n",
       "      <td>7188.000000</td>\n",
       "      <td>7188.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.220454e+06</td>\n",
       "      <td>0.335725</td>\n",
       "      <td>1.864883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.800404e+05</td>\n",
       "      <td>0.036164</td>\n",
       "      <td>33.964300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.054586e+06</td>\n",
       "      <td>0.301075</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.448317e+06</td>\n",
       "      <td>0.312500</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.887226e+06</td>\n",
       "      <td>0.326531</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.238719e+06</td>\n",
       "      <td>0.348485</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.479769e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>999.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id     tanimoto       cosine\n",
       "count  7.188000e+03  7188.000000  7188.000000\n",
       "mean   2.220454e+06     0.335725     1.864883\n",
       "std    8.800404e+05     0.036164    33.964300\n",
       "min    1.054586e+06     0.301075     0.000000\n",
       "25%    1.448317e+06     0.312500     0.000000\n",
       "50%    1.887226e+06     0.326531     0.000000\n",
       "75%    3.238719e+06     0.348485     0.000000\n",
       "max    3.479769e+06     1.000000   999.000000"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.tanimoto>0.3].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c168a66e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.690000e+02</td>\n",
       "      <td>169.000000</td>\n",
       "      <td>169.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.057890e+06</td>\n",
       "      <td>0.205028</td>\n",
       "      <td>253.419188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.665267e+03</td>\n",
       "      <td>0.143237</td>\n",
       "      <td>180.131876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.054550e+06</td>\n",
       "      <td>0.026316</td>\n",
       "      <td>100.499669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.055670e+06</td>\n",
       "      <td>0.114286</td>\n",
       "      <td>137.707436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.056816e+06</td>\n",
       "      <td>0.181818</td>\n",
       "      <td>193.571781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.059599e+06</td>\n",
       "      <td>0.244898</td>\n",
       "      <td>291.013025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.068841e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>999.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id    tanimoto      cosine\n",
       "count  1.690000e+02  169.000000  169.000000\n",
       "mean   1.057890e+06    0.205028  253.419188\n",
       "std    2.665267e+03    0.143237  180.131876\n",
       "min    1.054550e+06    0.026316  100.499669\n",
       "25%    1.055670e+06    0.114286  137.707436\n",
       "50%    1.056816e+06    0.181818  193.571781\n",
       "75%    1.059599e+06    0.244898  291.013025\n",
       "max    1.068841e+06    1.000000  999.000000"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.cosine>100].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83a1189c",
   "metadata": {},
   "source": [
    "# Search and Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "ac27364c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 478 ms, sys: 25.1 ms, total: 503 ms\n",
      "Wall time: 497 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>fingerprint</th>\n",
       "      <th>mz</th>\n",
       "      <th>intensity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035167</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...</td>\n",
       "      <td>[50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035168</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n",
       "      <td>[537.39, 599.5, 600.51, 1449.98, 1467.0]</td>\n",
       "      <td>[55.94, 999.0, 42.26, 853.85, 139.16]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035169</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.46, 598.5, 599.51, 600.49, 1448.92, 1449....</td>\n",
       "      <td>[41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035170</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[598.49, 599.5, 600.5, 1449.97]</td>\n",
       "      <td>[47.85, 999.0, 85.51, 336.46]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1035171</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.48, 599.5, 600.51, 1449.98]</td>\n",
       "      <td>[40.56, 999.0, 40.06, 151.55]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751903</th>\n",
       "      <td>3485111</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0546, 151.0386, 152.0703, 154.0496, 156.0...</td>\n",
       "      <td>[34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751904</th>\n",
       "      <td>3485112</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0545, 151.0385, 154.0496, 166.0495, 167.0...</td>\n",
       "      <td>[60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751905</th>\n",
       "      <td>3485113</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0547, 151.0386, 168.0653, 178.0494, 197.0...</td>\n",
       "      <td>[148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751906</th>\n",
       "      <td>3485114</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0547, 151.0387, 264.2682, 265.2721]</td>\n",
       "      <td>[316.88, 334.07, 999.0, 92.71]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751907</th>\n",
       "      <td>3485115</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[186.0757, 197.0439, 204.0863, 205.09, 214.071...</td>\n",
       "      <td>[18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>736795 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                        fingerprint  \\\n",
       "1       1035167  [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "2       1035168  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n",
       "3       1035169  [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "4       1035170  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "5       1035171  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n",
       "...         ...                                                ...   \n",
       "751903  3485111  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "751904  3485112  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "751905  3485113  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "751906  3485114  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "751907  3485115  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "\n",
       "                                                       mz  \\\n",
       "1       [597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...   \n",
       "2                [537.39, 599.5, 600.51, 1449.98, 1467.0]   \n",
       "3       [597.46, 598.5, 599.51, 600.49, 1448.92, 1449....   \n",
       "4                         [598.49, 599.5, 600.5, 1449.97]   \n",
       "5                        [597.48, 599.5, 600.51, 1449.98]   \n",
       "...                                                   ...   \n",
       "751903  [150.0546, 151.0386, 152.0703, 154.0496, 156.0...   \n",
       "751904  [150.0545, 151.0385, 154.0496, 166.0495, 167.0...   \n",
       "751905  [150.0547, 151.0386, 168.0653, 178.0494, 197.0...   \n",
       "751906           [150.0547, 151.0387, 264.2682, 265.2721]   \n",
       "751907  [186.0757, 197.0439, 204.0863, 205.09, 214.071...   \n",
       "\n",
       "                                                intensity  \n",
       "1       [50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...  \n",
       "2                   [55.94, 999.0, 42.26, 853.85, 139.16]  \n",
       "3       [41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...  \n",
       "4                           [47.85, 999.0, 85.51, 336.46]  \n",
       "5                           [40.56, 999.0, 40.06, 151.55]  \n",
       "...                                                   ...  \n",
       "751903  [34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....  \n",
       "751904  [60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....  \n",
       "751905  [148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...  \n",
       "751906                     [316.88, 334.07, 999.0, 92.71]  \n",
       "751907  [18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...  \n",
       "\n",
       "[736795 rows x 4 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "merged_df = pd.merge(fp_df, table.to_pandas(), how='inner', on='id')\n",
    "query_df = merged_df[merged_df.set=='test'][['id', 'fingerprint', 'mz', 'intensity']]\n",
    "db_df = merged_df[merged_df.set.isin(['test','train'])][['id', 'fingerprint', 'mz', 'intensity']]\n",
    "db_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "b0e18eb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>fingerprint_rep</th>\n",
       "      <th>fingerprint</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035166</td>\n",
       "      <td>b'\\x01\\x06\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035167</td>\n",
       "      <td>b'\\x01\\x06\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035168</td>\n",
       "      <td>b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035169</td>\n",
       "      <td>b'\\x01\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035170</td>\n",
       "      <td>b'\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751903</th>\n",
       "      <td>3485111</td>\n",
       "      <td>b'\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751904</th>\n",
       "      <td>3485112</td>\n",
       "      <td>b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751905</th>\n",
       "      <td>3485113</td>\n",
       "      <td>b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751906</th>\n",
       "      <td>3485114</td>\n",
       "      <td>b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>751907</th>\n",
       "      <td>3485115</td>\n",
       "      <td>b'\\x00\\x04\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>751908 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                    fingerprint_rep  \\\n",
       "0       1035166  b'\\x01\\x06\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "1       1035167  b'\\x01\\x06\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "2       1035168  b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "3       1035169  b'\\x01\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "4       1035170  b'\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "...         ...                                                ...   \n",
       "751903  3485111  b'\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "751904  3485112  b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "751905  3485113  b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "751906  3485114  b'\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "751907  3485115  b'\\x00\\x04\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...   \n",
       "\n",
       "                                              fingerprint  \n",
       "0       [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "1       [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "2       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...  \n",
       "3       [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "4       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...  \n",
       "...                                                   ...  \n",
       "751903  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...  \n",
       "751904  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "751905  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "751906  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...  \n",
       "751907  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...  \n",
       "\n",
       "[751908 rows x 3 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fp_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "957d1e68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>fingerprint</th>\n",
       "      <th>mz</th>\n",
       "      <th>intensity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035167</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...</td>\n",
       "      <td>[50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035168</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n",
       "      <td>[537.39, 599.5, 600.51, 1449.98, 1467.0]</td>\n",
       "      <td>[55.94, 999.0, 42.26, 853.85, 139.16]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035169</td>\n",
       "      <td>[1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.46, 598.5, 599.51, 600.49, 1448.92, 1449....</td>\n",
       "      <td>[41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035170</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[598.49, 599.5, 600.5, 1449.97]</td>\n",
       "      <td>[47.85, 999.0, 85.51, 336.46]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035171</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n",
       "      <td>[597.48, 599.5, 600.51, 1449.98]</td>\n",
       "      <td>[40.56, 999.0, 40.06, 151.55]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736790</th>\n",
       "      <td>3485111</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0546, 151.0386, 152.0703, 154.0496, 156.0...</td>\n",
       "      <td>[34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736791</th>\n",
       "      <td>3485112</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0545, 151.0385, 154.0496, 166.0495, 167.0...</td>\n",
       "      <td>[60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736792</th>\n",
       "      <td>3485113</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0547, 151.0386, 168.0653, 178.0494, 197.0...</td>\n",
       "      <td>[148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736793</th>\n",
       "      <td>3485114</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[150.0547, 151.0387, 264.2682, 265.2721]</td>\n",
       "      <td>[316.88, 334.07, 999.0, 92.71]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736794</th>\n",
       "      <td>3485115</td>\n",
       "      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...</td>\n",
       "      <td>[186.0757, 197.0439, 204.0863, 205.09, 214.071...</td>\n",
       "      <td>[18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>736795 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                        fingerprint  \\\n",
       "0       1035167  [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "1       1035168  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n",
       "2       1035169  [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "3       1035170  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "4       1035171  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n",
       "...         ...                                                ...   \n",
       "736790  3485111  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "736791  3485112  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "736792  3485113  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "736793  3485114  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, ...   \n",
       "736794  3485115  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ...   \n",
       "\n",
       "                                                       mz  \\\n",
       "0       [597.5, 599.5, 1449.98, 1450.98, 1465.98, 1466...   \n",
       "1                [537.39, 599.5, 600.51, 1449.98, 1467.0]   \n",
       "2       [597.46, 598.5, 599.51, 600.49, 1448.92, 1449....   \n",
       "3                         [598.49, 599.5, 600.5, 1449.97]   \n",
       "4                        [597.48, 599.5, 600.51, 1449.98]   \n",
       "...                                                   ...   \n",
       "736790  [150.0546, 151.0386, 152.0703, 154.0496, 156.0...   \n",
       "736791  [150.0545, 151.0385, 154.0496, 166.0495, 167.0...   \n",
       "736792  [150.0547, 151.0386, 168.0653, 178.0494, 197.0...   \n",
       "736793           [150.0547, 151.0387, 264.2682, 265.2721]   \n",
       "736794  [186.0757, 197.0439, 204.0863, 205.09, 214.071...   \n",
       "\n",
       "                                                intensity  \n",
       "0       [50.95, 683.32, 999.0, 43.56, 46.35, 50.65, 56...  \n",
       "1                   [55.94, 999.0, 42.26, 853.85, 139.16]  \n",
       "2       [41.86, 45.15, 999.0, 43.86, 41.86, 452.85, 18...  \n",
       "3                           [47.85, 999.0, 85.51, 336.46]  \n",
       "4                           [40.56, 999.0, 40.06, 151.55]  \n",
       "...                                                   ...  \n",
       "736790  [34.07, 49.75, 2.9, 4.1, 3.3, 8.79, 19.28, 25....  \n",
       "736791  [60.94, 82.12, 10.39, 10.79, 18.18, 35.96, 28....  \n",
       "736792  [148.45, 134.47, 18.78, 35.96, 35.26, 40.56, 9...  \n",
       "736793                     [316.88, 334.07, 999.0, 92.71]  \n",
       "736794  [18.08, 5.39, 96.1, 5.99, 3.0, 6.59, 4.2, 14.1...  \n",
       "\n",
       "[736795 rows x 4 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df = pd.merge(fp_df, table.to_pandas(), how='inner', on='id')\n",
    "query_df = merged_df[merged_df.set=='test'][['id', 'fingerprint', 'mz', 'intensity']]\n",
    "db_df = merged_df[merged_df.set.isin(['test','train'])][['id', 'fingerprint', 'mz', 'intensity']].reset_index(drop=True)\n",
    "db_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3e5d92dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2h 36min 22s, sys: 45.4 s, total: 2h 37min 8s\n",
      "Wall time: 2h 37min 17s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>query_id</th>\n",
       "      <th>id</th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1035242</td>\n",
       "      <td>1035241</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>945.043355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1035242</td>\n",
       "      <td>1035242</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>999.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1035242</td>\n",
       "      <td>1035467</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>945.043355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1035242</td>\n",
       "      <td>1035468</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>999.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1035242</td>\n",
       "      <td>1035243</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>942.953953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3746495</th>\n",
       "      <td>3484604</td>\n",
       "      <td>1145980</td>\n",
       "      <td>0.085714</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3746496</th>\n",
       "      <td>3484604</td>\n",
       "      <td>1231464</td>\n",
       "      <td>0.085714</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3746497</th>\n",
       "      <td>3484604</td>\n",
       "      <td>1806600</td>\n",
       "      <td>0.085714</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3746498</th>\n",
       "      <td>3484604</td>\n",
       "      <td>3362043</td>\n",
       "      <td>0.085714</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3746499</th>\n",
       "      <td>3484604</td>\n",
       "      <td>1062864</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3746500 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         query_id       id  tanimoto      cosine\n",
       "0         1035242  1035241  1.000000  945.043355\n",
       "1         1035242  1035242  1.000000  999.000000\n",
       "2         1035242  1035467  1.000000  945.043355\n",
       "3         1035242  1035468  1.000000  999.000000\n",
       "4         1035242  1035243  0.600000  942.953953\n",
       "...           ...      ...       ...         ...\n",
       "3746495   3484604  1145980  0.085714    0.000000\n",
       "3746496   3484604  1231464  0.085714    0.000000\n",
       "3746497   3484604  1806600  0.085714    0.000000\n",
       "3746498   3484604  3362043  0.085714    0.000000\n",
       "3746499   3484604  1062864  0.083333    0.000000\n",
       "\n",
       "[3746500 rows x 4 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "result_dfs = []\n",
    "for i, r in query_df.iterrows():\n",
    "    ts_df = db_df.assign(tanimoto=DataStructs.cDataStructs.BulkTanimotoSimilarity(r['fingerprint'], db_df['fingerprint'])).nlargest(500, 'tanimoto')\n",
    "    ts_df.insert(0, 'query_id', r['id'])\n",
    "    \n",
    "    query_spec = spectrum.init_spectrum(True, mz=r['mz'], intensity=r['intensity'])\n",
    "    cosine_score = []\n",
    "    for ts_i, ts_r in ts_df.iterrows():\n",
    "        spec = spectrum.init_spectrum(True, mz=ts_r['mz'], intensity=ts_r['intensity'])\n",
    "        cosine_score.append(query_spec.cosine_score(spec))\n",
    "    ts_df = ts_df.assign(cosine=cosine_score)\n",
    "    \n",
    "    result_dfs.append(ts_df[['query_id', 'id', 'tanimoto','cosine']])\n",
    "result_df = pd.concat(result_dfs).reset_index(drop=True)\n",
    "result_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "f995d87c",
   "metadata": {},
   "outputs": [],
   "source": [
    "result_df.to_csv(\"/data/aiomics/search/libraries/hr_msms_nist2020_v42_0_tanimoto-cosine.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "fdc086d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tanimoto</th>\n",
       "      <th>cosine</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tanimoto</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.630985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cosine</th>\n",
       "      <td>0.630985</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          tanimoto    cosine\n",
       "tanimoto  1.000000  0.630985\n",
       "cosine    0.630985  1.000000"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_df[['tanimoto', 'cosine']].corr(method='pearson')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7207574e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
