{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from masskit.utils.index import ArrowLibraryMap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read in pandas dataframe containing library info and show columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                        uint64\n",
      "spectrum                  object\n",
      "experimental_ri_error    float64\n",
      "vial_id                  float64\n",
      "instrument_type           object\n",
      "collision_gas             object\n",
      "experimental_ri_data     float64\n",
      "nce                      float64\n",
      "collision_energy         float64\n",
      "stdnp_error              float64\n",
      "stdnp                    float64\n",
      "sample_inlet              object\n",
      "insource_voltage         float64\n",
      "name                      object\n",
      "stdnp_data               float64\n",
      "stdpolar_data            float64\n",
      "synonyms                  object\n",
      "ionization                object\n",
      "column                    object\n",
      "charge                      int8\n",
      "instrument                object\n",
      "stdpolar_error           float64\n",
      "ev                       float64\n",
      "stdpolar                 float64\n",
      "experimental_ri          float64\n",
      "ion_mode                  object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "df = ArrowLibraryMap.from_parquet('/home/lyg/data/nist/2020/hr_msms_nist2020_v42_0.parquet').to_pandas()\n",
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Subset the dataframe with a query and print the names of matching compounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "519501     N-{5-[(2-Amino-1,3-thiazol-4-yl)methyl]-1,3,4-...\n",
       "520244                  2-(1-Benzyl-4-piperidinyl)ethanamine\n",
       "520549                   5-Amino-1,4-diphenyl-1,2,3-triazole\n",
       "521588                                  Pyridoxine disulfide\n",
       "522545                     4-(2-Morpholin-4-ylethoxy)aniline\n",
       "                                 ...                        \n",
       "1007563                                      GD2(d18:1/18:0)\n",
       "1007575                                      GD2(d18:1/18:0)\n",
       "1007584                                      GD2(d18:1/18:0)\n",
       "1007595                                      GD2(d18:1/18:0)\n",
       "1007655                 NeuAc.alpha.2-6-GM1b-Cer(d18:1/18:0)\n",
       "Name: name, Length: 118, dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_subset = df.query(\"10 < nce < 15 and charge==2\")\n",
    "df_subset[\"name\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Do a scatter plot of the relation between RI and rotatable bonds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7ef3b2ae6520>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "matplotlib.rcParams['figure.figsize'] = [10, 10]\n",
    "plt.scatter(df[\"nce\"], df[\"charge\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Retrieve a compound from the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "fluazinam = df.query(\"name == 'Fluazinam'\").iloc[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot the spectrum of fluazinam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "axes = plt.axes()\n",
    "fluazinam.spectrum.plot(axes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Explore the spectrum object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fluazinam\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print(fluazinam.spectrum.name)\n",
    "print(fluazinam.spectrum.charge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 94.91   6.99 999.  ]\n"
     ]
    }
   ],
   "source": [
    "print(fluazinam.spectrum.products.intensity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[372.9724 418.9654 464.9581]\n"
     ]
    }
   ],
   "source": [
    "print(fluazinam.spectrum.products.mz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id                                                                 1191057\n",
      "spectrum                 <img data-content=\"masskit/spectrum\" src=\"dat...\n",
      "experimental_ri_error                                                  NaN\n",
      "vial_id                                                             3459.0\n",
      "instrument_type                                                        HCD\n",
      "collision_gas                                                           N2\n",
      "experimental_ri_data                                                   NaN\n",
      "nce                                                                   15.0\n",
      "collision_energy                                                       NaN\n",
      "stdnp_error                                                            NaN\n",
      "stdnp                                                                  NaN\n",
      "sample_inlet                                         direct flow injection\n",
      "insource_voltage                                                       NaN\n",
      "name                                                             Fluazinam\n",
      "stdnp_data                                                             NaN\n",
      "stdpolar_data                                                          NaN\n",
      "synonyms                 [\"2-Pyridinamine, 3-chloro-N-[3-chloro-2,6-din...\n",
      "ionization                                                             ESI\n",
      "column                                                                None\n",
      "charge                                                                   1\n",
      "instrument                                  Thermo Finnigan Elite Orbitrap\n",
      "stdpolar_error                                                         NaN\n",
      "ev                                                                    16.0\n",
      "stdpolar                                                               NaN\n",
      "experimental_ri                                                        NaN\n",
      "ion_mode                                                                 P\n",
      "Name: 82097, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(fluazinam)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.10 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  },
  "vscode": {
   "interpreter": {
    "hash": "11d150ef1a59d6ee6bd3538ad9ed751649d8a614c736b8deec7e36a34a38bbb5"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
