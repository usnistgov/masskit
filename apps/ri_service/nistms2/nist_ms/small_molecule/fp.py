from rdkit import Chem
from rdkit.DataStructs import SparseBitVect

"""
NIST fingerprint made of smarts patterns from the MACCS and PubChem fingerprints
Derived from https://github.com/cdk/cdk/blob/58c261ababb8dfaee7b0e382e13e1bc10e9c1957/descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/PubchemFingerprinter.java
and https://github.com/rdkit/rdkit-orig/blob/master/rdkit/Chem/MACCSkeys.py
"""


smartsPatts = {
    1: ("*!:*:*!:*", 0),
    2: ("*!@*@*!@*", 0),
    3: ("*!@[#7]@*", 0),
    4: ("*!@[#8]!@*", 0),
    5: ("*!@[CH2]!@*", 0),
    6: ("*@*!@*@*", 0),
    7: ("*@*!@[#16]", 0),
    8: ("*@*!@[#7]", 0),
    9: ("*@*!@[#8]", 0),
    10: ("*@*!@[#8]", 0),
    11: ("*@*(@*)@*", 0),
    12: ("*~*(~*)(~*)~*", 0),
    13: ("*~[!#6;!#1](~*)~*", 0),
    14: ("*~[#16](~*)~*", 0),
    15: ("*~[#7](~*)~*", 0),
    16: ("*~[CH2]~[!#6;!#1;!H0]", 0),
    17: ("*~[CH2]~[#7]", 0),
    18: ("*~[CH2]~[#8]", 0),
    19: ("*1~*~*~*~*~*~*~1", 0),
    20: ("*1~*~*~*~*~*~1", 0),
    21: ("*1~*~*~*~*~*~1", 0),
    22: ("*1~*~*~*~*~1", 0),
    23: ("*1~*~*~*~1", 0),
    24: ("*1~*~*~1", 0),
    25: ("[!#6;!#1;!H0]", 0),
    26: ("[!#6;!#1;!H0]~*~*~*~[!#6;!#1;!H0]", 0),
    27: ("[!#6;!#1;!H0]~*~*~[!#6;!#1;!H0]", 0),
    28: ("[!#6;!#1;!H0]~*~[!#6;!#1;!H0]", 0),
    29: ("[!#6;!#1;!H0]~*~[CH2]~*", 0),
    30: ("[!#6;!#1;!H0]~[!#6;!#1;!H0]", 0),
    31: ("[!#6;!#1]~*(~[!#6;!#1])~[!#6;!#1]", 0),
    32: ("[!#6;!#1]~[!#6;!#1;!H0]", 0),
    33: ("[!#6;!#1]~[!#6;!#1]", 0),
    34: ("[!#6;!#1]~[!#6;!#1]", 0),
    35: ("[!#6;!#1]~[#16]", 0),
    36: ("[!#6;!#1]~[#16]~[!#6;!#1]", 0),
    37: ("[!#6;!#1]~[#7]", 0),
    38: ("[!#6;!#1]~[#7]~[!#6;!#1]", 0),
    39: ("[!#6;!#1]~[#8]", 0),
    40: ("[!#6;!#1]~[CH2]~*", 0),
    41: ("[!#6;!#1]~[CH2]~[!#6;!#1]", 0),
    42: ("[!#6;!#1]~[CH3]", 0),
    43: ("[!#6;!#1]~[F,Cl,Br,I]", 0),
    44: ("[!#6;!#1]1~*~*~*~*~*~1", 0),
    45: ("[!#6;!#1]1~*~*~*~*~1", 0),
    46: ("[!#6;!#1]1~*~*~*~1", 0),
    47: ("[!#6;!#1]1~*~*~1", 0),
    48: ("[!#6;R]", 0),
    49: ("[!+0]", 0),
    50: ("[!C;!c;R]", 0),
    51: ("[#104,#105,#106,#107,#106,#109,#110,#111,#112]", 0),
    52: ("[#104]", 0),
    53: ("[#14&!H0]", 0),
    54: ("[#14]", 0),
    55: ("[#14](~[#6])(~[#6])", 0),
    56: ("[#14]~[#14]", 0),
    57: ("[#14]~[Cl]", 0),
    58: ("[#15&!H0]", 0),
    59: ("[#15]", 0),
    60: ("[#15](-,:[#8])(=,:[#8])", 0),
    61: ("[#15](~[#6])(~[#6])", 0),
    62: ("[#15](~[#8])(~[#8])", 0),
    63: ("[#15]~[#15]", 0),
    64: ("[#15]=,:[#15]", 0),
    65: ("[#15]=,:[#8]", 0),
    66: ("[#16&!H0](~[#6])", 0),
    67: ("[#16]", 0),
    68: ("[#16]!:*:*", 0),
    69: ("[#16](-,:[#6])(=,:[#8])", 0),
    70: ("[#16](-,:[#8])(=,:[#8])", 0),
    71: ("[#16](~[#6])(~[#6])", 0),
    72: ("[#16](~[#6])(~[#8])", 0),
    73: ("[#16](=,:[#8])(=,:[#8])", 0),
    74: ("[#16]-,:[#16]-,:[#6]:[#6]", 0),
    75: ("[#16]-,:[#6]-,:[#16]-,:[#6]", 0),
    76: ("[#16]-,:[#6]:[#6&!H0]", 0),
    77: ("[#16]-,:[#6]:[#6]-,:[#6]", 0),
    78: ("[#16]-,:[#6]:[#6]-,:[#7]", 0),
    79: ("[#16]-,:[#6]:[#6]-,:[#8]", 0),
    80: ("[#16]-,:[#6]:[#7]:[#6]", 0),
    81: ("[#16]-,:[#6]:c:c-,:[#7]", 0),
    82: ("[#16]-,:[#6]=,:[#7&!H0]", 0),
    83: ("[#16]-,:[#6]=,:[#7]-,:[#6]", 0),
    84: ("[#16]:[#6]:[#6&!H0]", 0),
    85: ("[#16]:[#6]:[#6]:[#6]", 0),
    86: ("[#16]:[#6]:[#6]:[#7]", 0),
    87: ("[#16]-[#16]", 0),
    88: ("[#16][#6]1[#6]([#16])[#6][#6][#6][#6]1", 0),
    89: ("[#16][#6]1[#6]([#16])[#6][#6][#6]1", 0),
    90: ("[#16][#6]1[#6]([#7])[#6][#6][#6][#6]1", 0),
    91: ("[#16][#6]1[#6]([#7])[#6][#6][#6]1", 0),
    92: ("[#16][#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    93: ("[#16][#6]1[#6](Br)[#6][#6][#6]1", 0),
    94: ("[#16][#6]1[#6](Cl)[#6][#6][#6][#6]1", 0),
    95: ("[#16][#6]1[#6](Cl)[#6][#6][#6]1", 0),
    96: ("[#16][#6]1[#6][#6]([#16])[#6][#6][#6]1", 0),
    97: ("[#16][#6]1[#6][#6]([#16])[#6][#6]1", 0),
    98: ("[#16][#6]1[#6][#6]([#7])[#6][#6][#6]1", 0),
    99: ("[#16][#6]1[#6][#6]([#7])[#6][#6]1", 0),
    100: ("[#16][#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    101: ("[#16][#6]1[#6][#6](Br)[#6][#6]1", 0),
    102: ("[#16][#6]1[#6][#6](Cl)[#6][#6][#6]1", 0),
    103: ("[#16][#6]1[#6][#6](Cl)[#6][#6]1", 0),
    104: ("[#16][#6]1[#6][#6][#6]([#16])[#6][#6]1", 0),
    105: ("[#16][#6]1[#6][#6][#6]([#7])[#6][#6]1", 0),
    106: ("[#16][#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    107: ("[#16][#6]1[#6][#6][#6](Cl)[#6][#6]1", 0),
    108: ("[#16]-[#8]", 0),
    109: ("[#16]~*(~*)~*", 0),
    110: ("[#16]~*~[#7]", 0),
    111: ("[#16]=*", 0),
    112: ("[#16]=,:[#6]-,:[#7&!H0]", 0),
    113: ("[#16]=,:[#6]-,:[#7]-,:[#6]", 0),
    114: ("[#16]=[#8]", 0),
    115: ("[#16]c1c([#16])cccc1", 0),
    116: ("[#16]c1c([#7])cccc1", 0),
    117: ("[#16]c1c(Br)cccc1", 0),
    118: ("[#16]c1c(Cl)cccc1", 0),
    119: ("[#16]c1cc([#16])ccc1", 0),
    120: ("[#16]c1cc([#7])ccc1", 0),
    121: ("[#16]c1cc(Br)ccc1", 0),
    122: ("[#16]c1cc(Cl)ccc1", 0),
    123: ("[#16]c1ccc([#16])cc1", 0),
    124: ("[#16]c1ccc([#7])cc1", 0),
    125: ("[#16]c1ccc(Br)cc1", 0),
    126: ("[#16]c1ccc(Cl)cc1", 0),
    127: ("[#16R]", 0),
    128: ("[#32,#33,#34,#50,#51,#52,#82,#83,#84]", 0),
    129: ("[#33&!H0]", 0),
    130: ("[#33]-,:[#6]:[#6&!H0]", 0),
    131: ("[#33]~[#33]", 0),
    132: ("[#5&!H0]", 0),
    133: ("[#5,#13,#31,#49,#81]", 0),
    134: ("[#5]~[#14]", 0),
    135: ("[#5]~[#15]", 0),
    136: ("[#5]~[#16]", 0),
    137: ("[#5]~[#5]", 0),
    138: ("[#5]~[#6]", 0),
    139: ("[#5]~[#7]", 0),
    140: ("[#5]~[#8]", 0),
    141: ("[#5]~[Br]", 0),
    142: ("[#5]~[Cl]", 0),
    143: ("[#5]~[F]", 0),
    144: ("[#6&!H0]", 0),
    145: ("[#6&!H0](#[#6])", 0),
    146: ("[#6&!H0](-,:[#6])(=,:[#6])", 0),
    147: ("[#6&!H0](-,:[#6])(=,:[#7])", 0),
    148: ("[#6&!H0](-,:[#6])(=,:[#8])", 0),
    149: ("[#6&!H0](-,:[#7])(=,:[#6])", 0),
    150: ("[#6&!H0](:c)(:c)", 0),
    151: ("[#6&!H0](:c)(:n)", 0),
    152: ("[#6&!H0](:n)", 0),
    153: ("[#6&!H0](~[#14])", 0),
    154: ("[#6&!H0](~[#16])", 0),
    155: ("[#6&!H0](~[#6])(~[#15])", 0),
    156: ("[#6&!H0](~[#6])(~[#16])", 0),
    157: ("[#6&!H0](~[#6])(~[#7])", 0),
    158: ("[#6&!H0](~[#6])(~[#8])", 0),
    159: ("[#6&!H0](~[#6])(~[Cl])", 0),
    160: ("[#6&!H0](~[#7])", 0),
    161: ("[#6&!H0](~[#8])", 0),
    162: ("[#6&!H0](~[#8])(~[#8])", 0),
    163: ("[#6&!H0](~[Cl])", 0),
    164: ("[#6&!H0](=,:[#6])", 0),
    165: ("[#6&!H0](=,:[#7])", 0),
    166: ("[#6&!H0](=,:[#8])", 0),
    167: ("[#6&!H0]-,:[#6]-,:[#7&!H0]", 0),
    168: ("[#6&!H0]-,:[#8&!H0]", 0),
    169: ("[#6&!H0]:c", 0),
    170: ("[#6&!H0]~[Br]", 0),
    171: ("[#6]#[#6]", 0),
    172: ("[#6]#[#7]", 0),
    173: ("[#6](#[#6])(-,:[#6])", 0),
    174: ("[#6](#[#7])(-,:[#6])", 0),
    175: ("[#6](-,:[#6])(-,:[#6])(=,:[#6])", 0),
    176: ("[#6](-,:[#6])(-,:[#6])(=,:[#7])", 0),
    177: ("[#6](-,:[#6])(-,:[#6])(=,:[#8])", 0),
    178: ("[#6](-,:[#6])(-,:[#7])(=,:[#6])", 0),
    179: ("[#6](-,:[#6])(-,:[#7])(=,:[#7])", 0),
    180: ("[#6](-,:[#6])(-,:[#7])(=,:[#8])", 0),
    181: ("[#6](-,:[#6])(-,:[#8])(=,:[#8])", 0),
    182: ("[#6](-,:[#6])([Cl])(=,:[#8])", 0),
    183: ("[#6](-,:[#6])(=,:[#6])", 0),
    184: ("[#6](-,:[#6])(=,:[#7])", 0),
    185: ("[#6](-,:[#6])(=,:[#8])", 0),
    186: ("[#6](-,:[#7])(=,:[#6])", 0),
    187: ("[#6](-,:[#7])(=,:[#7])", 0),
    188: ("[#6](-,:[#7])(=,:[#8])", 0),
    189: ("[#6](-,:[#8])(=,:[#8])", 0),
    190: ("[#6](:c)(:c)", 0),
    191: ("[#6](:c)(:c)(:c)", 0),
    192: ("[#6](:c)(:c)(:n)", 0),
    193: ("[#6](:c)(:n)", 0),
    194: ("[#6](:c)(:n)(:n)", 0),
    195: ("[#6](:n)(:n)", 0),
    196: ("[#6]([Cl])(=,:[#8])", 0),
    197: ("[#6](~[#16])(:c)", 0),
    198: ("[#6](~[#6])(:c)", 0),
    199: ("[#6](~[#6])(:c)(:c)", 0),
    200: ("[#6](~[#6])(:c)(:n)", 0),
    201: ("[#6](~[#6])(:n)", 0),
    202: ("[#6](~[#6])(:n)(:n)", 0),
    203: ("[#6](~[#6])(~[#14])", 0),
    204: ("[#6](~[#6])(~[#16])", 0),
    205: ("[#6](~[#6])(~[#6])", 0),
    206: ("[#6](~[#6])(~[#6])(~[#6])", 0),
    207: ("[#6](~[#6])(~[#6])(~[#6])(~[#6])", 0),
    208: ("[#6](~[#6])(~[#6])(~[#6])(~[#7])", 0),
    209: ("[#6](~[#6])(~[#6])(~[#6])(~[#8])", 0),
    210: ("[#6](~[#6])(~[#6])(~[#7])", 0),
    211: ("[#6](~[#6])(~[#6])(~[#8])", 0),
    212: ("[#6](~[#6])(~[#7])", 0),
    213: ("[#6](~[#6])(~[#8])", 0),
    214: ("[#6](~[#6])(~[Cl])", 0),
    215: ("[#6](~[#6])(~[I])", 0),
    216: ("[#6](~[#7])(:c)", 0),
    217: ("[#6](~[#7])(:c)(:c)", 0),
    218: ("[#6](~[#7])(:c)(:n)", 0),
    219: ("[#6](~[#7])(:n)", 0),
    220: ("[#6](~[#7])(~[#7])", 0),
    221: ("[#6](~[#8])(:c)", 0),
    222: ("[#6](~[#8])(:c)(:c)", 0),
    223: ("[#6](~[#8])(~[#8])", 0),
    224: ("[#6](~[Br])(:[c])", 0),
    225: ("[#6](~[Br])(:[n])", 0),
    226: ("[#6](~[Cl])(:c)", 0),
    227: ("[#6](~[Cl])(~[Cl])", 0),
    228: ("[#6](~[F])(:c)", 0),
    229: ("[#6](~[F])(~[F])", 0),
    230: ("[#6](~Br)(~[#6])", 0),
    231: ("[#6](~Br)(~[#6])(~[#6])", 0),
    232: ("[#6]-,:[#16]-,:[#6]-,:[#6]-,:[#6]", 0),
    233: ("[#6]-,:[#16]-,:[#6]:[#6]", 0),
    234: ("[#6]-,:[#33]-[#8&!H0]", 0),
    235: ("[#6]-,:[#6](-,:[#6])(-,:[#6])-,:[#6]-,:[#6]", 0),
    236: ("[#6]-,:[#6](-,:[#6])-,:[#6](-,:[#6])-,:[#6]", 0),
    237: ("[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]", 0),
    238: ("[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]-,:[#6]", 0),
    239: ("[#6]-,:[#6]-,:[#16]-,:[#6]", 0),
    240: ("[#6]-,:[#6]-,:[#16]-,:[#6]-,:[#6]", 0),
    241: ("[#6]-,:[#6]-,:[#6]#[#6]", 0),
    242: ("[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]-,:[#6]", 0),
    243: ("[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    244: ("[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    245: ("[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]", 0),
    246: ("[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    247: ("[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    248: ("[#6]-,:[#6]-,:[#6]-,:[#6]:c", 0),
    249: ("[#6]-,:[#6]-,:[#6]-,:[#8&!H0]", 0),
    250: ("[#6]-,:[#6]-,:[#6]:[#6]-,:[#6]", 0),
    251: ("[#6]-,:[#6]-,:[#6]=,:[#6]", 0),
    252: ("[#6]-,:[#6]-,:[#6]=,:[#6]-,:[#6]", 0),
    253: ("[#6]-,:[#6]-,:[#7]-,:[#6]-,:[#6]", 0),
    254: ("[#6]-,:[#6]-,:[#8]-,:[#6]-,:[#6]", 0),
    255: ("[#6]-,:[#6]-,:[#8]-,:[#6]:c", 0),
    256: ("Cl[#6]1[#6][#6](Cl)[#6][#6]1", 0),
    257: ("Cl[#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    258: ("Cl[#6]1[#6][#6][#6](Cl)[#6][#6]1", 0),
    259: ("Clc1c(Br)cccc1", 0),
    260: ("Clc1c(Cl)cccc1", 0),
    261: ("Clc1cc(Br)ccc1", 0),
    262: ("Clc1cc(Cl)ccc1", 0),
    263: ("Clc1ccc(Br)cc1", 0),
    264: ("Clc1ccc(Cl)cc1", 0),
    265: ("F", 0),
    266: ("[#6]-,:[#6]:[#6]-,:[#6]-,:[#6]", 0),
    267: ("[#6]-,:[#6]:[#6]-,:[#7]-,:[#6]", 0),
    268: ("[#6]-,:[#6]:[#6]-,:[#8&!H0]", 0),
    269: ("[#6]-,:[#6]:[#6]-,:[#8]-,:[#6]", 0),
    270: ("[#6]-,:[#6]:[#6]-,:c:c", 0),
    271: ("[#6]-,:[#6]:[#7]:[#6]", 0),
    272: ("[#6]-,:[#6]=,:[#6]-,:[#6]", 0),
    273: ("[#6]-,:[#6]=,:[#6]-,:[#6]-,:[#6]", 0),
    274: ("[#6]-,:[#6]=,:[#6]-,:[#6]:c", 0),
    275: ("[#6]-,:[#6]=,:[#6]-,:[#6]=,:[#6]", 0),
    276: ("[#6]-,:[#6]=,:[#7]-,:[#7]-,:[#6]", 0),
    277: ("[#6]-,:[#7]-,:[#6&!H0]", 0),
    278: ("[#6]-,:[#7]-,:[#6]-,:[#6]-,:[#6]", 0),
    279: ("[#6]-,:[#7]-,:[#6]-,:[#6]:c", 0),
    280: ("[#6]-,:[#7]-,:[#6]-,:[#7]-,:[#6]", 0),
    281: ("[#6]-,:[#7]-,:[#6]:[#6]", 0),
    282: ("[#6]-,:[#7]-,:[#6]:[#6]-,:[#6]", 0),
    283: ("[#6]-,:[#7]-,:[#7&!H0]", 0),
    284: ("[#6]-,:[#7]:[#6&!H0]", 0),
    285: ("[#6]-,:[#8]-,:[#6]-,:[#6]:c", 0),
    286: ("[#6]-,:[#8]-,:[#6]-,:[#6]=,:[#6]", 0),
    287: ("[#6]-,:[#8]-,:[#6]-,:[#8]-,:[#6]", 0),
    288: ("[#6]-,:[#8]-,:[#6]:[#6]-,:[#6]", 0),
    289: ("[#6]-,:[#8]-,:[#6]=,:[#6]", 0),
    290: ("[#6]-,:c:c:[#6]-,:[#6]", 0),
    291: ("[#6]:[#16]:[#6]-,:[#6]", 0),
    292: ("[#6]:[#6]-,:[#6]-,:[#6]", 0),
    293: ("[#6]:[#6]-,:[#6]:[#6]", 0),
    294: ("[#6]:[#6]-,:[#6]=,:[#6]", 0),
    295: ("[#6]:[#6]-,:[#8]-,:[#6]", 0),
    296: ("[#6]:[#6]:[#7&!H0]", 0),
    297: ("[#6]:[#7]-,:[#6&!H0]", 0),
    298: ("[#6]:[#7]-,:[#6]:[#6]", 0),
    299: ("[#6]:[#7]:[#6]-,:[#6]", 0),
    300: ("[#6][#6]1[#6]([#16])[#6][#6][#6][#6]1", 0),
    301: ("[#6][#6]1[#6]([#16])[#6][#6][#6]1", 0),
    302: ("[#6][#6]1[#6]([#6])[#6][#6][#6][#6]1", 0),
    303: ("[#6][#6]1[#6]([#6])[#6][#6][#6]1", 0),
    304: ("[#6][#6]1[#6]([#7])[#6][#6][#6][#6]1", 0),
    305: ("[#6][#6]1[#6]([#7])[#6][#6][#6]1", 0),
    306: ("[#6][#6]1[#6]([#8])[#6][#6][#6][#6]1", 0),
    307: ("[#6][#6]1[#6]([#8])[#6][#6][#6]1", 0),
    308: ("[#6][#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    309: ("[#6][#6]1[#6](Br)[#6][#6][#6]1", 0),
    310: ("[#6][#6]1[#6](Cl)[#6][#6][#6][#6]1", 0),
    311: ("[#6][#6]1[#6](Cl)[#6][#6][#6]1", 0),
    312: ("[#6][#6]1[#6][#6]([#16])[#6][#6][#6]1", 0),
    313: ("[#6][#6]1[#6][#6]([#16])[#6][#6]1", 0),
    314: ("[#6][#6]1[#6][#6]([#6])[#6][#6][#6]1", 0),
    315: ("[#6][#6]1[#6][#6]([#6])[#6][#6]1", 0),
    316: ("[#6][#6]1[#6][#6]([#7])[#6][#6][#6]1", 0),
    317: ("[#6][#6]1[#6][#6]([#7])[#6][#6]1", 0),
    318: ("[#6][#6]1[#6][#6]([#8])[#6][#6][#6]1", 0),
    319: ("[#6][#6]1[#6][#6]([#8])[#6][#6]1", 0),
    320: ("[#6][#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    321: ("[#6][#6]1[#6][#6](Br)[#6][#6]1", 0),
    322: ("[#6][#6]1[#6][#6](Cl)[#6][#6][#6]1", 0),
    323: ("[#6][#6]1[#6][#6](Cl)[#6][#6]1", 0),
    324: ("[#6][#6]1[#6][#6][#6]([#16])[#6][#6]1", 0),
    325: ("[#6][#6]1[#6][#6][#6]([#6])[#6][#6]1", 0),
    326: ("[#6][#6]1[#6][#6][#6]([#7])[#6][#6]1", 0),
    327: ("[#6][#6]1[#6][#6][#6]([#8])[#6][#6]1", 0),
    328: ("[#6][#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    329: ("[#6][#6]1[#6][#6][#6](Cl)[#6][#6]1", 0),
    330: ("N#[#6]-,:[#6]-,:[#6]", 0),
    331: ("n:c:n:c", 0),
    332: ("Cl", 0),
    333: ("Cl[#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    334: ("Cl[#6]1[#6](Br)[#6][#6][#6]1", 0),
    335: ("Cl[#6]1[#6](Cl)[#6][#6][#6][#6]1", 0),
    336: ("Cl[#6]1[#6](Cl)[#6][#6][#6]1", 0),
    337: ("Cl[#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    338: ("Cl[#6]1[#6][#6](Br)[#6][#6]1", 0),
    339: ("Cl[#6]1[#6][#6](Cl)[#6][#6][#6]1", 0),
    340: ("[#6]-[#7]", 0),
    341: ("[#6]-[#8]", 0),
    342: ("[#6]~[!#6;!#1](~[#6])(~[#6])~*", 0),
    343: ("[#6]~[#14]", 0),
    344: ("[#6]~[#15]", 0),
    345: ("[#6]~[#16]", 0),
    346: ("[#6]~[#16]~[#7]", 0),
    347: ("[#6]~[#16]~[#8]", 0),
    348: ("[#6]~[#33]", 0),
    349: ("[#6]~[#34]", 0),
    350: ("[#6]~[#6]", 0),
    351: ("[#6]~[#6](~[#6])(~[#6])~*", 0),
    352: ("[#6]~[#7]", 0),
    353: ("[#6]~[#7](~[#6])~[#6]", 0),
    354: ("[#6]~[#8]", 0),
    355: ("[#6]~[Al]", 0),
    356: ("[#6]~[Br]", 0),
    357: ("[#6]~[Cl]", 0),
    358: ("[#6]~[F]", 0),
    359: ("[#6]~[I]", 0),
    360: ("[#6]~[Mg]", 0),
    361: ("[#6]~[Na]", 0),
    362: ("[#6]=,:[#16]", 0),
    363: ("[#6]=,:[#6]", 0),
    364: ("[#6]=,:[#6]-,:[#6]-,:[#6]", 0),
    365: ("[#6]=,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    366: ("[#6]=,:[#6]-,:[#6]-,:[#8&!H0]", 0),
    367: ("[#6]=,:[#6]-,:[#6]-,:[#8]-,:[#6]", 0),
    368: ("[#6]=,:[#6]-,:[#6]:[#6]", 0),
    369: ("[#6]=,:[#6]-,:[#6]=,:[#6]", 0),
    370: ("[#6]=,:[#7]", 0),
    371: ("[#6]=,:[#7]-,:[#7]-,:[#6]", 0),
    372: ("[#6]=,:[#8]", 0),
    373: ("[#6]=;@[#6](@*)@*", 0),
    374: ("[#6]=[#6]", 0),
    375: ("[#6]=[#6](~*)~*", 0),
    376: ("[#6]=[#6](~[!#6;!#1])~[!#6;!#1]", 0),
    377: ("[#6]=[#6](~[#6])~[#6]", 0),
    378: ("[#6]=[#6]~[#7]", 0),
    379: ("[#6]=[#7]", 0),
    380: ("[#6]=[#8]", 0),
    381: ("[#6]c1c([#16])cccc1", 0),
    382: ("[#6]c1c([#6])cccc1", 0),
    383: ("[#6]c1c([#7])cccc1", 0),
    384: ("[#6]c1c([#8])cccc1", 0),
    385: ("[#6]c1c(Br)cccc1", 0),
    386: ("[#6]c1c(Cl)cccc1", 0),
    387: ("[#6]c1cc([#16])ccc1", 0),
    388: ("[#6]c1cc([#6])ccc1", 0),
    389: ("[#6]c1cc([#7])ccc1", 0),
    390: ("[#6]c1cc([#8])ccc1", 0),
    391: ("[#6]c1cc(Br)ccc1", 0),
    392: ("[#6]c1cc(Cl)ccc1", 0),
    393: ("[#6]c1ccc([#16])cc1", 0),
    394: ("[#6]c1ccc([#6])cc1", 0),
    395: ("[#6]c1ccc([#7])cc1", 0),
    396: ("[#6]c1ccc([#8])cc1", 0),
    397: ("[#6]c1ccc(Br)cc1", 0),
    398: ("[#6]c1ccc(Cl)cc1", 0),
    399: ("[#6H,#6H2,#6H3,#6H4]~[#6]", 0),
    400: ("[#6H,#6H2,#6H3]-,:[#6]=,:[#6H,#6H2,#6H3]", 0),
    401: ("[#6H,#6H2,#6H3]=,:[#6H,#6H2,#6H3]", 0),
    402: ("[#6H1](~[#6])(~[#6])(~[#6])", 0),
    403: ("[#6H1](~[#6])(~[#6])(~[#7])", 0),
    404: ("[#6H1](~[#6])(~[#6])(~[#8])", 0),
    405: ("[#6H1](~[#6])(~[#8])(~[#8])", 0),
    406: ("[#6H3]", 0),
    407: ("[#7&!H0]", 0),
    408: ("[#7&!H0](:c)", 0),
    409: ("[#7&!H0](:c)(:c)", 0),
    410: ("[#7&!H0](~[#6])", 0),
    411: ("[#7&!H0](~[#6])(~[#6])", 0),
    412: ("[#7&!H0](~[#6])(~[#7])", 0),
    413: ("[#7&!H0](~[#7])", 0),
    414: ("[#7&!H0]-,:[#6&!H0]", 0),
    415: ("[#7&!H0]-,:[#7&!H0]", 0),
    416: ("[#7;!H0]", 0),
    417: ("[#7;R]", 0),
    418: ("[#7]", 0),
    419: ("[#7]!:*:*", 0),
    420: ("[#7]#[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    421: ("[#7]#[#6]-,:[#6]=,:[#6]", 0),
    422: ("[#7](-,:[#6])(=,:[#6])", 0),
    423: ("[#7](-,:[#6])(=,:[#8])", 0),
    424: ("[#7](-,:[#8])(=,:[#8])", 0),
    425: ("[#7](:c)(:c)", 0),
    426: ("[#7](:c)(:c)(:c)", 0),
    427: ("[#7](~[#6])(:c)", 0),
    428: ("[#7](~[#6])(:c)(:c)", 0),
    429: ("[#7](~[#6])(~[#6])", 0),
    430: ("[#7](~[#6])(~[#6])(~[#6])", 0),
    431: ("[#7](~[#6])(~[#8])", 0),
    432: ("[#7](~[#8])(:o)", 0),
    433: ("[#7](~[#8])(~[#8])", 0),
    434: ("[#7]-,:[#16]-,:[#6]:[#6]", 0),
    435: ("[#7]-,:[#6]-,:[#16]-,:[#6]", 0),
    436: ("[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    437: ("[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    438: ("[#7]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    439: ("[#7]-,:[#6]-,:[#6]-,:[#6]:c", 0),
    440: ("[#7]-,:[#6]-,:[#6]-,:[#7]", 0),
    441: ("[#7]-,:[#6]-,:[#6]-,:[#7]-,:[#6]", 0),
    442: ("[#7]-,:[#6]-,:[#6]-,:[#8]-,:[#6]", 0),
    443: ("[#7]-,:[#6]-,:[#6]:[#6]", 0),
    444: ("[#7]-,:[#6]-,:[#6]:[#6]-,:[#6]", 0),
    445: ("[#7]-,:[#6]-,:[#6]=,:[#6]", 0),
    446: ("[#7]-,:[#6]-,:[#7]-,:[#6]", 0),
    447: ("[#7]-,:[#6]-,:[#7]-,:[#6]-,:[#6]", 0),
    448: ("[#7]-,:[#6]-,:[#7]-,:[#6]:c", 0),
    449: ("[#7]-,:[#6]-,:[#8]-,:[#6]-,:[#6]", 0),
    450: ("[#7]-,:[#6]:[#6&!H0]", 0),
    451: ("[#7]-,:[#6]:[#6]-,:[#6]", 0),
    452: ("[#7]-,:[#6]:[#6]-,:[#6]-,:[#6]", 0),
    453: ("[#7]-,:[#6]:[#6]-,:[#7]", 0),
    454: ("[#7]-,:[#6]:[#6]-,:[#8&!H0]", 0),
    455: ("[#7]-,:[#6]:[#6]:[#6]-,:[#6]", 0),
    456: ("[#7]-,:[#6]:[#6]:[#6]-,:[#7]", 0),
    457: ("[#7]-,:[#6]:[#6]:[#7]", 0),
    458: ("[#7]-,:[#6]:[#7]:[#6]", 0),
    459: ("[#7]-,:[#6]:[#7]:[#7]", 0),
    460: ("[#7]-,:[#6]:[#8]:[#6]", 0),
    461: ("[#7]-,:[#6]:c:c:n", 0),
    462: ("[#7]-,:[#6]=,:[#6&!H0]", 0),
    463: ("[#7]-,:[#6]=,:[#7&!H0]", 0),
    464: ("[#7]-,:[#6]=,:[#7]-,:[#6]", 0),
    465: ("[#7]-,:[#7]-,:[#6]-,:[#6]", 0),
    466: ("[#7]-,:[#7]-,:[#6]-,:[#7&!H0]", 0),
    467: ("[#7]-,:[#7]-,:[#6]-,:[#7]", 0),
    468: ("[#7]-,:[#7]-,:[#6]:[#6]", 0),
    469: ("[#7]:[#6]-,:[#16&!H0]", 0),
    470: ("[#7]:[#6]-,:[#6]:[#6]", 0),
    471: ("[#7]:[#6]-,:[#8&!H0]", 0),
    472: ("[#7]:[#6]:[#6]-,:[#6]", 0),
    473: ("[#7]:[#6]:[#6]:[#7]", 0),
    474: ("[#7]:[#6]:[#7]-,:[#6]", 0),
    475: ("[#7]:[#7]-,:[#6&!H0]", 0),
    476: ("[#7][#6]1[#6]([#7])[#6][#6][#6][#6]1", 0),
    477: ("[#7][#6]1[#6]([#7])[#6][#6][#6]1", 0),
    478: ("[#7][#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    479: ("[#7][#6]1[#6](Br)[#6][#6][#6]1", 0),
    480: ("[#7][#6]1[#6](Cl)[#6][#6][#6][#6]1", 0),
    481: ("[#7][#6]1[#6](Cl)[#6][#6]1", 0),
    482: ("[#7][#6]1[#6][#6]([#7])[#6][#6][#6]1", 0),
    483: ("[#7][#6]1[#6][#6]([#7])[#6][#6]1", 0),
    484: ("[#7][#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    485: ("[#7][#6]1[#6][#6](Br)[#6][#6]1", 0),
    486: ("[#7][#6]1[#6][#6](Cl)[#6][#6][#6]1", 0),
    487: ("[#7][#6]1[#6][#6](Cl)[#6][#6]1", 0),
    488: ("[#7][#6]1[#6][#6][#6]([#7])[#6][#6]1", 0),
    489: ("[#7][#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    490: ("[#7][#6]1[#6][#6][#6](Cl)[#6][#6]1", 0),
    491: ("[#7]-[#8]", 0),
    492: ("[#7]~*(~*)~*", 0),
    493: ("[#7]~*~*~*~[#7]", 0),
    494: ("[#7]~*~*~*~[#8]", 0),
    495: ("[#7]~*~*~[#7]", 0),
    496: ("[#7]~*~*~[#8]", 0),
    497: ("[#7]~*~[#7]", 0),
    498: ("[#7]~*~[#8]", 0),
    499: ("[#7]~*~[CH2]~*", 0),
    500: ("[#7]~[#14]", 0),
    501: ("[#7]~[#15]", 0),
    502: ("[#7]~[#16]", 0),
    503: ("[#7]~[#6](~[#6])~[#7]", 0),
    504: ("[#7]~[#6](~[#7])~[#7]", 0),
    505: ("[#7]~[#6](~[#8])~[#7]", 0),
    506: ("[#7]~[#6](~[#8])~[#8]", 0),
    507: ("[#7]~[#6]~[#8]", 0),
    508: ("[#7]~[#7]", 0),
    509: ("[#7]~[#7]", 0),
    510: ("[#7]~[#8]", 0),
    511: ("[#7]~[Br]", 0),
    512: ("[#7]~[Cl]", 0),
    513: ("[#7]~[F]", 0),
    514: ("[#7]=*", 0),
    515: ("[#7]=,:[#15]", 0),
    516: ("[#7]=,:[#6]-,:[#6&!H0]", 0),
    517: ("[#7]=,:[#6]-,:[#6]-,:[#6]", 0),
    518: ("[#7]=,:[#6]-,:[#6]:[#6&!H0]", 0),
    519: ("[#7]=,:[#6]-,:[#6]=,:[#6]", 0),
    520: ("[#7]=,:[#6]-,:[#7]-,:[#6]", 0),
    521: ("[#7]=,:[#6]-,:[#7]-,:[#6]-,:[#6]", 0),
    522: ("[#7]=,:[#7]", 0),
    523: ("[#7]=,:[#8]", 0),
    524: ("[#7]=[#8]", 0),
    525: ("[#7]c1c([#7])cccc1", 0),
    526: ("[#7]c1c(Br)cccc1", 0),
    527: ("[#7]c1c(Cl)cccc1", 0),
    528: ("[#7]c1cc([#7])ccc1", 0),
    529: ("[#7]c1cc(Br)ccc1", 0),
    530: ("[#7]c1cc(Cl)ccc1", 0),
    531: ("[#7]c1ccc([#7])cc1", 0),
    532: ("[#7]c1ccc(Br)cc1", 0),
    533: ("[#7]c1ccc(Cl)cc1", 0),
    534: ("[#8&!H0]", 0),
    535: ("[#8&!H0](~[#16])", 0),
    536: ("[#8&!H0](~[#6])", 0),
    537: ("[#8]", 0),
    538: ("[#8]!:*:*", 0),
    539: ("[#8](:c)(:c)", 0),
    540: ("[#8](~[#6])(~[#15])", 0),
    541: ("[#8](~[#6])(~[#6])", 0),
    542: ("[#8]-,:[#16]-,:[#6]:[#6]", 0),
    543: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    544: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    545: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#6])-,:[#6]", 0),
    546: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#7])-,:[#6]", 0),
    547: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#8])-,:[#6]", 0),
    548: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    549: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    550: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    551: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]-,:[#6]", 0),
    552: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    553: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]-,:[#6]", 0),
    554: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    555: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    556: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    557: ("[#8]-,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    558: ("[#8]-,:[#6]-,:[#6]-,:[#6]:c", 0),
    559: ("[#8]-,:[#6]-,:[#6]-,:[#6]=,:[#6]", 0),
    560: ("[#8]-,:[#6]-,:[#6]-,:[#6]=,:[#8]", 0),
    561: ("[#8]-,:[#6]-,:[#6]-,:[#7]", 0),
    562: ("[#8]-,:[#6]-,:[#6]-,:[#7]-,:[#6]", 0),
    563: ("[#8]-,:[#6]-,:[#6]-,:[#8&!H0]", 0),
    564: ("[#8]-,:[#6]-,:[#6]-,:[#8]", 0),
    565: ("[#8]-,:[#6]-,:[#6]-,:[#8]-,:[#6]", 0),
    566: ("[#8]-,:[#6]-,:[#6]:[#6]", 0),
    567: ("[#8]-,:[#6]-,:[#6]:[#6]-,:[#6]", 0),
    568: ("[#8]-,:[#6]-,:[#6]:[#6]-,:[#8]", 0),
    569: ("[#8]-,:[#6]-,:[#6]=,:[#6]", 0),
    570: ("[#8]-,:[#6]-,:[#6]=,:[#6]-,:[#6]", 0),
    571: ("[#8]-,:[#6]-,:[#6]=,:[#7]", 0),
    572: ("[#8]-,:[#6]-,:[#6]=,:[#8]", 0),
    573: ("[#8]-,:[#6]-,:[#7&!H0]", 0),
    574: ("[#8]-,:[#6]-,:[#8]-,:[#6]", 0),
    575: ("[#8]-,:[#6]-,:[#8]-,:[#6]-,:[#6]", 0),
    576: ("[#8]-,:[#6]:[#6&!H0]", 0),
    577: ("[#8]-,:[#6]:[#6]-,:[#6]", 0),
    578: ("[#8]-,:[#6]:[#6]-,:[#6]-,:[#6]", 0),
    579: ("[#8]-,:[#6]:[#6]-,:[#7]", 0),
    580: ("[#8]-,:[#6]:[#6]-,:[#8&!H0]", 0),
    581: ("[#8]-,:[#6]:[#6]-,:[#8]", 0),
    582: ("[#8]-,:[#6]:[#6]-,:[#8]-,:[#6]", 0),
    583: ("[#8]-,:[#6]:[#6]:[#6]-,:[#6]", 0),
    584: ("[#8]-,:[#6]:[#6]:[#6]-,:[#7]", 0),
    585: ("[#8]-,:[#6]:[#6]:[#6]-,:[#8]", 0),
    586: ("[#8]-,:[#6]:[#6]:[#7]", 0),
    587: ("[#8]-,:[#6]=,:[#6]-,:[#6]", 0),
    588: ("[#8]-,:[#7]-,:[#6]-,:[#6]", 0),
    589: ("[#8][#6]1[#6]([#16])[#6][#6][#6][#6]1", 0),
    590: ("[#8][#6]1[#6]([#16])[#6][#6][#6]1", 0),
    591: ("[#8][#6]1[#6]([#7])[#6][#6][#6][#6]1", 0),
    592: ("[#8][#6]1[#6]([#7])[#6][#6][#6]1", 0),
    593: ("[#8][#6]1[#6]([#8])[#6][#6][#6][#6]1", 0),
    594: ("[#8][#6]1[#6]([#8])[#6][#6][#6]1", 0),
    595: ("[#8][#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    596: ("[#8][#6]1[#6](Br)[#6][#6][#6]1", 0),
    597: ("[#8][#6]1[#6](Cl)[#6][#6][#6][#6]1", 0),
    598: ("[#8][#6]1[#6](Cl)[#6][#6][#6]1", 0),
    599: ("[#8][#6]1[#6][#6]([#16])[#6][#6][#6]1", 0),
    600: ("[#8][#6]1[#6][#6]([#16])[#6][#6]1", 0),
    601: ("[#8][#6]1[#6][#6]([#7])[#6][#6][#6]1", 0),
    602: ("[#8][#6]1[#6][#6]([#7])[#6][#6]1", 0),
    603: ("[#8][#6]1[#6][#6]([#8])[#6][#6][#6]1", 0),
    604: ("[#8][#6]1[#6][#6]([#8])[#6][#6]1", 0),
    605: ("[#8][#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    606: ("c:n", 0),
    607: ("[#8][#6]1[#6][#6](Br)[#6][#6]1", 0),
    608: ("[#8][#6]1[#6][#6](Cl)[#6][#6][#6]1", 0),
    609: ("[#8][#6]1[#6][#6](Cl)[#6][#6]1", 0),
    610: ("[#8][#6]1[#6][#6][#6]([#16])[#6][#6]1", 0),
    611: ("[#8][#6]1[#6][#6][#6]([#7])[#6][#6]1", 0),
    612: ("[#8][#6]1[#6][#6][#6]([#8])[#6][#6]1", 0),
    613: ("[#8][#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    614: ("[#8][#6]1[#6][#6][#6](Cl)[#6][#6]1", 0),
    615: ("[#8]~*~*~*~[#8]", 0),
    616: ("[#8]~*~*~[#8]", 0),
    617: ("[#8]~*~[CH2]~*", 0),
    618: ("[#8]~[!#6;!#1](~[#8])(~[#8])", 0),
    619: ("[#8]~[#14]", 0),
    620: ("[#8]~[#15]", 0),
    621: ("[#8]~[#16](~[#8])~[#8]", 0),
    622: ("[#8]~[#16]~[#8]", 0),
    623: ("[#8]~[#6](~[#6])~[#6]", 0),
    624: ("[#8]~[#6](~[#7])~[#6]", 0),
    625: ("[#8]~[#6](~[#8])~[#8]", 0),
    626: ("[#8]~[#6]~[#8]", 0),
    627: ("[#8]~[#7](~[#6])~[#6]", 0),
    628: ("[#8]~[#7](~[#8])~[#6]", 0),
    629: ("[#8]~[#8]", 0),
    630: ("[#8]~[Al]", 0),
    631: ("[#8]~[K]", 0),
    632: ("[#8]~[Mg]", 0),
    633: ("[#8]~[Na]", 0),
    634: ("[#8]=*", 0),
    635: ("[#8]=,:[#16]-,:[#6]-,:[#6]", 0),
    636: ("[#8]=,:[#16]-,:[#6]-,:[#7]", 0),
    637: ("[#8]=,:[#33]-,:[#6]:c:c", 0),
    638: ("[#8]=,:[#6]-,:[#6]-,:[#6]", 0),
    639: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    640: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    641: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#7])-,:[#6]", 0),
    642: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](-,:[#8])-,:[#6]", 0),
    643: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6](=,:[#8])-,:[#6]", 0),
    644: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    645: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    646: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    647: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    648: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#6]=,:[#8]", 0),
    649: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    650: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    651: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#6]=,:[#8]", 0),
    652: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#7]", 0),
    653: ("[#8]=,:[#6]-,:[#6]-,:[#6]-,:[#8]", 0),
    654: ("[#8]=,:[#6]-,:[#6]-,:[#6]=,:[#8]", 0),
    655: ("[#8]=,:[#6]-,:[#6]-,:[#7]", 0),
    656: ("[#8]=,:[#6]-,:[#6]-,:[#7]-,:[#6]", 0),
    657: ("[#8]=,:[#6]-,:[#6]-,:[#8]", 0),
    658: ("[#8]=,:[#6]-,:[#6]-,:[#8]-,:[#6]", 0),
    659: ("[#8]=,:[#6]-,:[#6]-,:c:c", 0),
    660: ("[#8]=,:[#6]-,:[#6]:[#6]", 0),
    661: ("[#8]=,:[#6]-,:[#6]:[#6]-,:[#6]", 0),
    662: ("[#8]=,:[#6]-,:[#6]:[#6]-,:[#7]", 0),
    663: ("[#8]=,:[#6]-,:[#6]:[#6]-,:[#8]", 0),
    664: ("[#8]=,:[#6]-,:[#6]:[#7]", 0),
    665: ("[#8]=,:[#6]-,:[#6]=,:[#6&!H0]", 0),
    666: ("[#8]=,:[#6]-,:[#6]=,:[#6]", 0),
    667: ("[#8]=,:[#6]-,:[#6]=,:[#6]-,:[#6]", 0),
    668: ("[#8]=,:[#6]-,:[#6]=,:[#6]-,:[#7]", 0),
    669: ("[#8]=,:[#6]-,:[#7]-,:[#6&!H0]", 0),
    670: ("[#8]=,:[#6]-,:[#7]-,:[#6]-,:[#6]", 0),
    671: ("[#8]=,:[#6]-,:[#7]-,:[#6]-,:[#7]", 0),
    672: ("[#8]=,:[#6]-,:[#7]-,:[#6]=,:[#8]", 0),
    673: ("[#8]=,:[#6]-,:[#7]-,:[#7]", 0),
    674: ("[#8]=,:[#6]-,:[#8]-,:[#6]:c", 0),
    675: ("[#8]=,:[#7]-,:[#6]:[#6]-,:[#7]", 0),
    676: ("[#8]=,:[#7]-,:c:c", 0),
    677: ("[#8]=,:[#7]-,:c:c-,:[#8]", 0),
    678: ("[#8]c1c([#16])cccc1", 0),
    679: ("[#8]c1c([#7])cccc1", 0),
    680: ("[#8]c1c([#8])cccc1", 0),
    681: ("[#8]c1c(Br)cccc1", 0),
    682: ("[#8]c1c(Cl)cccc1", 0),
    683: ("[#8]c1cc([#16])ccc1", 0),
    684: ("[#8]c1cc([#7])ccc1", 0),
    685: ("[#8]c1cc([#8])ccc1", 0),
    686: ("[#8]c1cc(Br)ccc1", 0),
    687: ("[#8]c1cc(Cl)ccc1", 0),
    688: ("[#8]c1ccc([#16])cc1", 0),
    689: ("[#8]c1ccc([#7])cc1", 0),
    690: ("[#8]c1ccc([#8])cc1", 0),
    691: ("[#8]c1ccc(Br)cc1", 0),
    692: ("[#8]c1ccc(Cl)cc1", 0),
    693: ("[#8R]", 0),
    694: (
    "[$(*~[CH2]~*~*~*~[CH2]~*),$([R]1@[CH2;R]@[R]@[R]@[R]@[CH2;R]1),$(*~[CH2]~[R]1@[R]@[R]@[CH2;R]1),$(*~[CH2]~*~[R]1@[R]@[CH2;R]1)]",
    0),
    695: ("[$(*~[CH2]~*~*~[CH2]~*),$([R]1@[CH2]@[R]@[R]@[CH2;R]1),$(*~[CH2]~[R]1@[R]@[CH2;R]1)]", 0),
    696: ("[$(*~[CH2]~[CH2]~*),$(*1~[CH2]~[CH2]1)]", 0),
    697: ("[$(*~[CH2]~[CH2]~*),$([R]1@[CH2;R]@[CH2;R]1)]", 0),
    698: (
    "[$([!#6;!#1;!H0]~*~*~*~[CH2]~*),$([!#6;!#1;!H0;R]1@[R]@[R]@[R]@[CH2;R]1),$([!#6;!#1;!H0]~[R]1@[R]@[R]@[CH2;R]1),$([!#6;!#1;!H0]~*~[R]1@[R]@[CH2;R]1)]",
    0),
    699: ("[$([!#6;!#1;!H0]~*~*~[CH2]~*),$([!#6;!#1;!H0;R]1@[R]@[R]@[CH2;R]1),$([!#6;!#1;!H0]~[R]1@[R]@[CH2;R]1)]", 0),
    700: ("[$([CH3]~*~*~[CH2]~*),$([CH3]~*1~*~[CH2]1)]", 0),
    701: (
    "[$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1),$([R]@1@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]@[R]1)]",
    0),
    702: ("[Ac,Th,Pa,U,Np,Pu,Am,Cm,Bk,Cf,Es,Fm,Md,No,Lr]", 0),
    703: ("[Al&!H0]", 0),
    704: ("[Al]~[Cl]", 0),
    705: ("[Be,Mg,Ca,Sr,Ba,Ra]", 0),
    706: ("[Br]-,:[#6]-,:[#6]-,:[#6]", 0),
    707: ("[Br]-,:[#6]-,:[#6]-,:[#6]:c", 0),
    708: ("[Br]-,:[#6]-,:[#6]=,:[#8]", 0),
    709: ("[Br]-,:[#6]:[#6]-,:[#6]", 0),
    710: ("[Br]-,:[#6]:c:c-,:[#6]", 0),
    711: ("[C;H2,H3][!#6;!#1][C;H2,H3]", 0),
    712: ("[C;H3,H4]", 0),
    713: ("[CH2]=*", 0),
    714: ("[CH3]", 0),
    715: ("[CH3]~*~*~*~[CH2]~*", 0),
    716: ("[CH3]~*~[CH2]~*", 0),
    717: ("[CH3]~*~[CH3]", 0),
    718: ("[CH3]~[CH2]~*", 0),
    719: ("[Cl]-,:[#6]-,:[#6]-,:[#6]", 0),
    720: ("[Cl]-,:[#6]-,:[#6]-,:[#6]-,:[#6]", 0),
    721: ("[Cl]-,:[#6]-,:[#6]-,:[#7]-,:[#6]", 0),
    722: ("[Cl]-,:[#6]-,:[#6]-,:[#8]", 0),
    723: ("[Cl]-,:[#6]-,:[#6]-,:[Cl]", 0),
    724: ("[Cl]-,:[#6]-,:[#6]=,:[#8]", 0),
    725: ("[Cl]-,:[#6]:[#6&!H0]", 0),
    726: ("[Cl]-,:[#6]:[#6]-,:[#6]", 0),
    727: ("[Cl]-,:[#6]:[#6]-,:[#6]=,:[#8]", 0),
    728: ("[Cl]-,:[#6]:[#6]-,:[#8]", 0),
    729: ("[Cl]-,:[#6]:[#6]-,:[#8]-,:[#6]", 0),
    730: ("[Cl]-,:[#6]:[#6]-,:[Cl]", 0),
    731: ("[Cl]-,:[#6]:[#6]:[#6]-,:[#6]", 0),
    732: ("[Cu,Zn,Ag,Cd,Au,Hg]", 0),
    733: ("[F,Cl,Br,I]", 0),
    734: ("[F,Cl,Br,I]!@*@*", 0),
    735: ("[F,Cl,Br,I]~*(~*)~*", 0),
    736: ("[F]~[#15]", 0),
    737: ("[F]~[#16]", 0),
    738: ("[Fe,Co,Ni,Ru,Rh,Pd,Os,Ir,Pt]", 0),
    739: ("[I]", 0),
    740: ("[La,Ce,Pr,Nd,Pm,Sm,Eu,Gd,Tb,Dy,Ho,Er,Tm,Yb,Lu]", 0),
    741: ("[Li&!H0]", 0),
    742: ("[Li,Na,K,Rb,Cs,Fr]", 0),
    743: ("[Li]~[#15]", 0),
    744: ("[Li]~[#16]", 0),
    745: ("[Li]~[#5]", 0),
    746: ("[Li]~[#6]", 0),
    747: ("[Li]~[#8]", 0),
    748: ("[Li]~[Cl]", 0),
    749: ("[Li]~[F]", 0),
    750: ("[Li]~[Li]", 0),
    751: ("[NH2]", 0),
    752: ("[O;!H0]", 0),
    753: ("[R]", 0),
    754: ("[Sc,Ti,Y,Zr,Hf]", 0),
    755: ("[V,Cr,Mn,Nb,Mo,Tc,Ta,W,Re]", 0),
    756: ("a", 0),
    757: ("Br", 0),
    758: ("Br[#6]1[#6](Br)[#6][#6][#6][#6]1", 0),
    759: ("Br[#6]1[#6](Br)[#6][#6][#6]1", 0),
    760: ("Br[#6]1[#6][#6](Br)[#6][#6][#6]1", 0),
    761: ("Br[#6]1[#6][#6](Br)[#6][#6]1", 0),
    762: ("Br[#6]1[#6][#6][#6](Br)[#6][#6]1", 0),
    763: ("Brc1c(Br)cccc1", 0),
    764: ("Brc1cc(Br)ccc1", 0),
    765: ("Brc1ccc(Br)cc1", 0),
    766: ("c:[#6]-,:[#6]-,:[#6]:c", 0),
    767: ("c:c-,:[#6]-,:[#6]-,:[#6]", 0),
    768: ("c:c-,:[#6]=,:[#6]-,:[#6]", 0),
    769: ("c:c-,:[#7]-,:c:c", 0),
    770: ("c:c-,:[#8]-,:[#6]-,:[#6]", 0),
    771: ("c:c:n:n:c", 0)
}

NISTKeys = None


def _init_nist_keys(key_list, key_dict):
    """
    *Internal Use Only*
    generates SMARTS patterns for the keys, run once
    """
    assert len(key_list) == len(key_dict.keys()), 'length mismatch'
    for key in key_dict.keys():
        patt, count = key_dict[key]
        if patt != '?':
            try:
                sma = Chem.MolFromSmarts(patt)
            except:
                sma = None
            if not sma:
                print('SMARTS parser error for key #%d: %s' % (key, patt))
            else:
                key_list[key - 1] = sma, count
    return


def gen_nist_keys(mol):
    """ generates the NIST fingerprint for a molecule
    :param mol: the molecule to be fingerprinted
    :returns: SparseBitVect containing the fingerprint
    """
    global NISTKeys
    if NISTKeys is None:
        NISTKeys = [(None, 0)] * len(smartsPatts.keys())
        _init_nist_keys(NISTKeys, smartsPatts)

    res = SparseBitVect(len(NISTKeys) + 1)
    for i, (patt, count) in enumerate(NISTKeys):
        if patt is not None:
            if count == 0:
                res[i + 1] = mol.HasSubstructMatch(patt)
            else:
                matches = mol.GetSubstructMatches(patt)
                if len(matches) > count:
                    res[i + 1] = 1

    return res


if __name__ == "__main__":
    import unittest
    from rdkit import Chem


    class TestNISTfp(unittest.TestCase):
        """
        unit tests for the NIST fingerprint
        """

        def test_peaks(self):
            mol = Chem.MolFromSmiles("CC(=O)OC1=CC=CC=C1C(=O)O")
            fp = gen_nist_keys(mol)
            self.assertTrue(fp[21])
            return

    unittest.main()


